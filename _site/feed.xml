<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>라라벨 한국어 매뉴얼</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://www.xpressengine.com/</link>
    <atom:link href="http://www.xpressengine.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 10 May 2015 19:46:03 +0900</pubDate>
    <lastBuildDate>Sun, 10 May 2015 19:46:03 +0900</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>뷰(Views)</title>
        <description>&lt;h1 id=&quot;뷰(views)&quot;&gt;뷰(Views)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#basic-usage&quot;&gt;기본 사용법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#view-composers&quot;&gt;뷰 컴포저&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;basic-usage&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;기본-사용법&quot;&gt;기본 사용법&lt;/h2&gt;

&lt;p&gt;뷰는 응용 프로그램에서 제공하는 HTML을 포함하고 프리젠 테이션 로직 컨트롤러 및 도메인 로직을 분리하는 편리한 방법을 제공합니다. 뷰파일들은 &lt;code&gt;resources/views&lt;/code&gt; 디렉토리에 위치합니다. &lt;/p&gt;

&lt;p&gt;간단한 뷰는 다음과 같습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;!-- View stored in resources/views/greeting.php --&amp;gt;

&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Hello, &amp;lt;?php echo $name; ?&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;뷰는 다음과 같이 브라우저로 보내집니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::get(&amp;#39;/&amp;#39;, function()
{
    return view(&amp;#39;greeting&amp;#39;, [&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;James&amp;#39;]);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;보는바와 같이 &lt;code&gt;view&lt;/code&gt; 헬퍼 함수에 전달하는 첫번째 인자는 &lt;code&gt;resources/views&lt;/code&gt; 디렉토리에 있는 파일의 이름이 됩니다. 두번째 전달 인자는 뷰에서 사용하기위한 데이터의 배열입니다. &lt;/p&gt;

&lt;p&gt;\당연하게도 뷰는 &lt;code&gt;resources/views&lt;/code&gt; 디렉토리의 중첩된 서브 디렉토리를 구성할 수 있습니다. 예를들어 뷰파일이 &lt;code&gt;resources/views/admin/profile.php&lt;/code&gt; 처럼 저장되었다면 다음처럼 호출해야 합니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return view(&amp;#39;admin.profile&amp;#39;, $data);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;뷰에-데이터-전달하기&quot;&gt;뷰에 데이터 전달하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Using conventional approach
$view = view(&amp;#39;greeting&amp;#39;)-&amp;gt;with(&amp;#39;name&amp;#39;, &amp;#39;Victoria&amp;#39;);

// Using Magic Methods
$view = view(&amp;#39;greeting&amp;#39;)-&amp;gt;withName(&amp;#39;Victoria&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 예제의 경우 뷰에서는 &lt;code&gt;$name&lt;/code&gt; 변수에 &lt;code&gt;Victoria&lt;/code&gt;라는 값을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;필요한 경우에 &lt;code&gt;view&lt;/code&gt; 헬퍼 함수에 두번째 인자로 데이터 배열을 전달할 수도 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$view = view(&amp;#39;greetings&amp;#39;, $data);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이러한 방식으로 정보를 전달할 때,&lt;code&gt;$data&lt;/code&gt;는 키/값으로 구성된 배열이어야 합니다. 뷰 안에서 여러분은 `&lt;code&gt;와 같이 각각의 키에 해당하는 값에 엑세스 할 수 있습니다. (&lt;/code&gt;$data[&amp;#39;$key&amp;#39;]`는 존재한다고 가정합니다. )&lt;/p&gt;

&lt;h4 id=&quot;모든-뷰에서-데이터-공유하기&quot;&gt;모든 뷰에서 데이터 공유하기&lt;/h4&gt;

&lt;p&gt;때때로 어플리케이션에서 표시하는 모든 뷰에서 데이터를 공유할 필요가 있을 수도 있습니다. 이 경우 몇가지의 옵션이 있습니다. &lt;code&gt;view&lt;/code&gt; 헬퍼 함수를 사용하거나 &lt;code&gt;Illuminate\Contracts\View\Factory&lt;/code&gt; &lt;a href=&quot;/docs/5.0/contracts&quot;&gt;contract&lt;/a&gt;를 이용하는 법, 또는 와일드 카드의 &lt;a href=&quot;#view-composers&quot;&gt;view composer&lt;/a&gt;를 통하는 방법입니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;view&lt;/code&gt; 헬퍼함수를 이용하는 예제입니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;view()-&amp;gt;share(&amp;#39;data&amp;#39;, [1, 2, 3]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;View&lt;/code&gt; 파사드를 사용할 수도 있습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;View::share(&amp;#39;data&amp;#39;, [1, 2, 3]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일반적으로 &lt;code&gt;share&lt;/code&gt; 메소드는 서비스 프로바이더의 &lt;code&gt;boot&lt;/code&gt; 메소드 안에서 호출합니다.  &lt;code&gt;AppServiceProvider&lt;/code&gt; 에서 편하게 추가할수도 있고, 다른 별도의 서비스 프로바이더를 생성하고 구성할 수도 있습니다. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;** 참고:** &lt;code&gt;view&lt;/code&gt; 헬퍼 함수를 전달 인자 없이 호출하는 경우에는 반환값은 &lt;code&gt;Illuminate\Contracts\View\Factory&lt;/code&gt; contract의 구현체가 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;뷰가-존재하는지-판단하기&quot;&gt;뷰가 존재하는지 판단하기&lt;/h4&gt;

&lt;p&gt;뷰 파일이 존재하는 판단해야될 필요가 있다면 &lt;code&gt;exists&lt;/code&gt; 메소드를 사용하면 됩니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if (view()-&amp;gt;exists(&amp;#39;emails.customer&amp;#39;))
{
    //
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;파일-패스로-부터-view-반환&quot;&gt;파일 패스로 부터 view 반환&lt;/h4&gt;

&lt;p&gt;필요하다면 절대경로를 기반으로 뷰를 생성할 수도 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return view()-&amp;gt;file($pathToFile, $data);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;view-composers&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;뷰-컴포저&quot;&gt;뷰 컴포저&lt;/h2&gt;

&lt;p&gt;뷰 컴포저는 뷰가 렌더링 될 때 호출되는 콜백 또는 클래스 메소드입니다. 만약 뷰가 렌더링 될 때마다 뷰에 전달해야할 데이터를 가지고 있다면 뷰 컴포저는 해당 로직을 한곳에서 구성할수 있게해줍니다. &lt;/p&gt;

&lt;h4 id=&quot;뷰-컴포저-정의하기&quot;&gt;뷰 컴포저 정의하기&lt;/h4&gt;

&lt;p&gt;뷰 컴포저를 &lt;a href=&quot;/docs/5.0/providers&quot;&gt;서비스 프로바이더&lt;/a&gt;를 통해서 구성해 봅시다. &lt;code&gt;Illuminate\Contracts\View\Factory&lt;/code&gt; contract 구현체에 엑세스 하기 위해서 &lt;code&gt;View&lt;/code&gt; 파사드를 사용할 것입니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;?php namespace App\Providers;

use View;
use Illuminate\Support\ServiceProvider;

class ComposerServiceProvider extends ServiceProvider {

    /**
     * Register bindings in the container.
     *
     * @return void
     */
    public function boot()
    {
        // Using class based composers...
        View::composer(&amp;#39;profile&amp;#39;, &amp;#39;App\Http\ViewComposers\ProfileComposer&amp;#39;);

        // Using Closure based composers...
        View::composer(&amp;#39;dashboard&amp;#39;, function($view)
        {

        });
    }

    /**
     * Register
     *
     * @return void
     */
    public function register()
    {
        //
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;참고:&lt;/strong&gt; 라라벨은 뷰 컴포저를 위한 디렉토리를 기본적으로 포함하고 있지는 않습니다. 여러분이 원하시는대로 편하게 구성하면 됩니다. 예를 들어 &lt;code&gt;App\Http\ViewComposers&lt;/code&gt; 디렉토리를 새롭게 생성할 수 있습니다. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;기억해야 될 부분은 생성한 서비스 프로바이더를 &lt;code&gt;config/app.php&lt;/code&gt; 설정 파일의 &lt;code&gt;providers&lt;/code&gt; 배열에 추가해야한다는 것입니다. &lt;/p&gt;

&lt;p&gt;이제 뷰 컴포저를 등록했다면 &lt;code&gt;profile&lt;/code&gt; 뷰가 렌더링 될 때마다 &lt;code&gt;ProfileComposer@compose&lt;/code&gt; 메소드가 실행될 것입니다. 이제 컴포저 클래스를 정의해봅시다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;?php namespace App\Http\ViewComposers;

use Illuminate\Contracts\View\View;
use Illuminate\Users\Repository as UserRepository;

class ProfileComposer {

    /**
     * The user repository implementation.
     *
     * @var UserRepository
     */
    protected $users;

    /**
     * Create a new profile composer.
     *
     * @param  UserRepository  $users
     * @return void
     */
    public function __construct(UserRepository $users)
    {
        // Dependencies automatically resolved by service container...
        $this-&amp;gt;users = $users;
    }

    /**
     * Bind data to the view.
     *
     * @param  View  $view
     * @return void
     */
    public function compose(View $view)
    {
        $view-&amp;gt;with(&amp;#39;count&amp;#39;, $this-&amp;gt;users-&amp;gt;count());
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;뷰가 렌더링되기 전에 뷰컴포저의 &lt;code&gt;composer&lt;/code&gt; 메소드가 &lt;code&gt;Illuminate\Contracts\View\View&lt;/code&gt; 인스턴스와 함께 호출됩니다. 데이터를 전달하기 위해서 &lt;code&gt;with&lt;/code&gt; 메소드를 사용할 수 있습니다. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;참고:&lt;/strong&gt; 모든 뷰 컴포저의 의존성 주입은 &lt;a href=&quot;/docs/5.0/container&quot;&gt;service container&lt;/a&gt;, 를 통해서 이루어 집니다. 그렇기 때문에 필요한 객체의 경우 뷰 컴포저의 생성자에서 타입힌트를 지정한 형태로 지정하면 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;와일드카드-뷰컴포저&quot;&gt;와일드카드 뷰컴포저&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;composer&lt;/code&gt; 메소드는 &lt;code&gt;*&lt;/code&gt; 와일드 캐릭터로 인자를 받을 수 있는데 이렇게 하면 모든 뷰에 뷰컴포저를 지정하게 됩니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;View::composer(&amp;#39;*&amp;#39;, function($view)
{
    //
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;컴포저에-다수의-뷰들-지정하기&quot;&gt;컴포저에 다수의 뷰들 지정하기&lt;/h4&gt;

&lt;p&gt;뷰 컴포저에 뷰를 지정할 때 한번에 여러 뷰를 지정할 수 있습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;View::composer([&amp;#39;profile&amp;#39;, &amp;#39;dashboard&amp;#39;], &amp;#39;App\Http\ViewComposers\MyViewComposer&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;다수의-컴포저-정의하기&quot;&gt;다수의 컴포저 정의하기&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;composers&lt;/code&gt; 메소드를 사용하면 한번에 컴포저를 그룹지어 등록할 수 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;View::composers([
    &amp;#39;App\Http\ViewComposers\AdminComposer&amp;#39; =&amp;gt; [&amp;#39;admin.index&amp;#39;, &amp;#39;admin.profile&amp;#39;],
    &amp;#39;App\Http\ViewComposers\UserComposer&amp;#39; =&amp;gt; &amp;#39;user&amp;#39;,
    &amp;#39;App\Http\ViewComposers\ProductComposer&amp;#39; =&amp;gt; &amp;#39;product&amp;#39;
]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;뷰-크리에이터&quot;&gt;뷰 크리에이터&lt;/h3&gt;

&lt;p&gt;뷰 &lt;strong&gt;크리에이터&lt;/strong&gt;는 뷰 컴포저와 거의 비슷하게 동작합니다; 하지만 뷰 크리에이터는 뷰가 인스턴스화 되는 즉시 실행됩니다. 뷰 크리에이터를 등록하기 위해서는 &lt;code&gt;creator&lt;/code&gt; 메소드를 사용합니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;View::creator(&amp;#39;profile&amp;#39;, &amp;#39;App\Http\ViewCreators\ProfileCreator&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Sat, 09 May 2015 00:00:00 +0900</pubDate>
        <link>http://www.xpressengine.com/docs/5.0/views</link>
        <guid isPermaLink="true">http://www.xpressengine.com/docs/5.0/views</guid>
        
        
        <category>5.0</category>
        
      </item>
    
      <item>
        <title>Validation</title>
        <description>&lt;h1 id=&quot;validation&quot;&gt;Validation&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#basic-usage&quot;&gt;Basic Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#controller-validation&quot;&gt;Controller Validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#form-request-validation&quot;&gt;Form Request Validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#working-with-error-messages&quot;&gt;Working With Error Messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#error-messages-and-views&quot;&gt;Error Messages &amp;amp; Views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#available-validation-rules&quot;&gt;Available Validation Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conditionally-adding-rules&quot;&gt;Conditionally Adding Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#custom-error-messages&quot;&gt;Custom Error Messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#custom-validation-rules&quot;&gt;Custom Validation Rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;basic-usage&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;basic-usage&quot;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;Laravel ships with a simple, convenient facility for validating data and retrieving validation error messages via the &lt;code&gt;Validation&lt;/code&gt; class.&lt;/p&gt;

&lt;h4 id=&quot;basic-validation-example&quot;&gt;Basic Validation Example&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$validator = Validator::make(
    [&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Dayle&amp;#39;],
    [&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;required|min:5&amp;#39;]
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first argument passed to the &lt;code&gt;make&lt;/code&gt; method is the data under validation. The second argument is the validation rules that should be applied to the data.&lt;/p&gt;

&lt;h4 id=&quot;using-arrays-to-specify-rules&quot;&gt;Using Arrays To Specify Rules&lt;/h4&gt;

&lt;p&gt;Multiple rules may be delimited using either a &amp;quot;pipe&amp;quot; character, or as separate elements of an array.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$validator = Validator::make(
    [&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Dayle&amp;#39;],
    [&amp;#39;name&amp;#39; =&amp;gt; [&amp;#39;required&amp;#39;, &amp;#39;min:5&amp;#39;]]
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;validating-multiple-fields&quot;&gt;Validating Multiple Fields&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$validator = Validator::make(
    [
        &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Dayle&amp;#39;,
        &amp;#39;password&amp;#39; =&amp;gt; &amp;#39;lamepassword&amp;#39;,
        &amp;#39;email&amp;#39; =&amp;gt; &amp;#39;email@example.com&amp;#39;
    ],
    [
        &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;required&amp;#39;,
        &amp;#39;password&amp;#39; =&amp;gt; &amp;#39;required|min:8&amp;#39;,
        &amp;#39;email&amp;#39; =&amp;gt; &amp;#39;required|email|unique:users&amp;#39;
    ]
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once a &lt;code&gt;Validator&lt;/code&gt; instance has been created, the &lt;code&gt;fails&lt;/code&gt; (or &lt;code&gt;passes&lt;/code&gt;) method may be used to perform the validation.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if ($validator-&amp;gt;fails())
{
    // The given data did not pass validation
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If validation has failed, you may retrieve the error messages from the validator.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$messages = $validator-&amp;gt;messages();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You may also access an array of the failed validation rules, without messages. To do so, use the &lt;code&gt;failed&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$failed = $validator-&amp;gt;failed();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;validating-files&quot;&gt;Validating Files&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Validator&lt;/code&gt; class provides several rules for validating files, such as &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;mimes&lt;/code&gt;, and others. When validating files, you may simply pass them into the validator with your other data.&lt;/p&gt;

&lt;h3 id=&quot;after-validation-hook&quot;&gt;After Validation Hook&lt;/h3&gt;

&lt;p&gt;The validator also allows you to attach callbacks to be run after validation is completed. This allows you to easily perform further validation, and even add more error messages to the message collection. To get started, use the &lt;code&gt;after&lt;/code&gt; method on a validator instance:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$validator = Validator::make(...);

$validator-&amp;gt;after(function($validator)
{
    if ($this-&amp;gt;somethingElseIsInvalid())
    {
        $validator-&amp;gt;errors()-&amp;gt;add(&amp;#39;field&amp;#39;, &amp;#39;Something is wrong with this field!&amp;#39;);
    }
});

if ($validator-&amp;gt;fails())
{
    //
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You may add as many &lt;code&gt;after&lt;/code&gt; callbacks to a validator as needed.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;controller-validation&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;controller-validation&quot;&gt;Controller Validation&lt;/h2&gt;

&lt;p&gt;Of course, manually creating and checking a &lt;code&gt;Validator&lt;/code&gt; instance each time you do validation is a headache. Don&amp;#39;t worry, you have other options! The base &lt;code&gt;App\Http\Controllers\Controller&lt;/code&gt; class included with Laravel uses a &lt;code&gt;ValidatesRequests&lt;/code&gt; trait. This trait provides a single, convenient method for validating incoming HTTP requests. Here&amp;#39;s what it looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
 * Store the incoming blog post.
 *
 * @param  Request  $request
 * @return Response
 */
public function store(Request $request)
{
    $this-&amp;gt;validate($request, [
        &amp;#39;title&amp;#39; =&amp;gt; &amp;#39;required|unique|max:255&amp;#39;,
        &amp;#39;body&amp;#39; =&amp;gt; &amp;#39;required&amp;#39;,
    ]);

    //
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If validation passes, your code will keep executing normally. However, if validation fails, an &lt;code&gt;Illuminate\Contracts\Validation\ValidationException&lt;/code&gt; will be thrown. This exception is automatically caught and a redirect is generated to the user&amp;#39;s previous location. The validation errors are even automatically flashed to the session!&lt;/p&gt;

&lt;p&gt;If the incoming request was an AJAX request, no redirect will be generated. Instead, an HTTP response with a 422 status code will be returned to the browser containing a JSON representation of the validation errors.&lt;/p&gt;

&lt;p&gt;For example, here is the equivalent code written manually:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
 * Store the incoming blog post.
 *
 * @param  Request  $request
 * @return Response
 */
public function store(Request $request)
{
    $v = Validator::make($request-&amp;gt;all(), [
        &amp;#39;title&amp;#39; =&amp;gt; &amp;#39;required|unique|max:255&amp;#39;,
        &amp;#39;body&amp;#39; =&amp;gt; &amp;#39;required&amp;#39;,
    ]);

    if ($v-&amp;gt;fails())
    {
        return redirect()-&amp;gt;back()-&amp;gt;withErrors($v-&amp;gt;errors());
    }

    //
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;customizing-the-flashed-error-format&quot;&gt;Customizing The Flashed Error Format&lt;/h3&gt;

&lt;p&gt;If you wish to customize the format of the validation errors that are flashed to the session when validation fails, override the &lt;code&gt;formatValidationErrors&lt;/code&gt; on your base controller. Don&amp;#39;t forget to import the &lt;code&gt;Illuminate\Validation\Validator&lt;/code&gt; class at the top of the file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
 * {@inheritdoc}
 */
protected function formatValidationErrors(Validator $validator)
{
    return $validator-&amp;gt;errors()-&amp;gt;all();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;form-request-validation&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;form-request-validation&quot;&gt;Form Request Validation&lt;/h2&gt;

&lt;p&gt;For more complex validation scenarios, you may wish to create a &amp;quot;form request&amp;quot;. Form requests are custom request classes that contain validation logic. To create a form request class, use the &lt;code&gt;make:request&lt;/code&gt; Artisan CLI command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;php artisan make:request StoreBlogPostRequest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The generated class will be placed in the &lt;code&gt;app/Http/Requests&lt;/code&gt; directory. Let&amp;#39;s add a few validation rules to the &lt;code&gt;rules&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
 * Get the validation rules that apply to the request.
 *
 * @return array
 */
public function rules()
{
    return [
        &amp;#39;title&amp;#39; =&amp;gt; &amp;#39;required|unique|max:255&amp;#39;,
        &amp;#39;body&amp;#39; =&amp;gt; &amp;#39;required&amp;#39;,
    ];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, how are the validation rules executed? All you need to do is type-hint the request on your controller method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
 * Store the incoming blog post.
 *
 * @param  StoreBlogPostRequest  $request
 * @return Response
 */
public function store(StoreBlogPostRequest $request)
{
    // The incoming request is valid...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The incoming form request is validated before the controller method is called, meaning you do not need to clutter your controller with any validation logic. It has already been validated!&lt;/p&gt;

&lt;p&gt;If validation fails, a redirect response will be generated to send the user back to their previous location. The errors will also be flashed to the session so they are available for display. If the request was an AJAX request, a HTTP response with a 422 status code will be returned to the user including a JSON representation of the validation errors.&lt;/p&gt;

&lt;h3 id=&quot;authorizing-form-requests&quot;&gt;Authorizing Form Requests&lt;/h3&gt;

&lt;p&gt;The form request class also contains an &lt;code&gt;authorize&lt;/code&gt; method. Within this method, you may check if the authenticated user actually has the authority to update a given resource. For example, if a user is attempting to update a blog post comment, do they actually own that comment? For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
 * Determine if the user is authorized to make this request.
 *
 * @return bool
 */
public function authorize()
{
    $commentId = $this-&amp;gt;route(&amp;#39;comment&amp;#39;);

    return Comment::where(&amp;#39;id&amp;#39;, $commentId)
                  -&amp;gt;where(&amp;#39;user_id&amp;#39;, Auth::id())-&amp;gt;exists();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the call to the &lt;code&gt;route&lt;/code&gt; method in the example above. This method grants you access to the URI parameters defined on the route being called, such as the &lt;code&gt;{comment}&lt;/code&gt; parameter in the example below:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::post(&amp;#39;comment/{comment}&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the &lt;code&gt;authorize&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;, a HTTP response with a 403 status code will automatically be returned and your controller method will not execute.&lt;/p&gt;

&lt;p&gt;If you plan to have authorization logic in another part of your application, simply return &lt;code&gt;true&lt;/code&gt; from the &lt;code&gt;authorize&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
 * Determine if the user is authorized to make this request.
 *
 * @return bool
 */
public function authorize()
{
    return true;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;customizing-the-flashed-error-format&quot;&gt;Customizing The Flashed Error Format&lt;/h3&gt;

&lt;p&gt;If you wish to customize the format of the validation errors that are flashed to the session when validation fails, override the &lt;code&gt;formatErrors&lt;/code&gt; on your base request (&lt;code&gt;App\Http\Requests\Request&lt;/code&gt;). Don&amp;#39;t forget to import the &lt;code&gt;Illuminate\Validation\Validator&lt;/code&gt; class at the top of the file:
    /**
     * {@inheritdoc}
     */
    protected function formatErrors(Validator $validator)
    {
        return $validator-&amp;gt;errors()-&amp;gt;all();
    }&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;working-with-error-messages&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;working-with-error-messages&quot;&gt;Working With Error Messages&lt;/h2&gt;

&lt;p&gt;After calling the &lt;code&gt;messages&lt;/code&gt; method on a &lt;code&gt;Validator&lt;/code&gt; instance, you will receive a &lt;code&gt;MessageBag&lt;/code&gt; instance, which has a variety of convenient methods for working with error messages.&lt;/p&gt;

&lt;h4 id=&quot;retrieving-the-first-error-message-for-a-field&quot;&gt;Retrieving The First Error Message For A Field&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;echo $messages-&amp;gt;first(&amp;#39;email&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;retrieving-all-error-messages-for-a-field&quot;&gt;Retrieving All Error Messages For A Field&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;foreach ($messages-&amp;gt;get(&amp;#39;email&amp;#39;) as $message)
{
    //
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;retrieving-all-error-messages-for-all-fields&quot;&gt;Retrieving All Error Messages For All Fields&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;foreach ($messages-&amp;gt;all() as $message)
{
    //
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;determining-if-messages-exist-for-a-field&quot;&gt;Determining If Messages Exist For A Field&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if ($messages-&amp;gt;has(&amp;#39;email&amp;#39;))
{
    //
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;retrieving-an-error-message-with-a-format&quot;&gt;Retrieving An Error Message With A Format&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;echo $messages-&amp;gt;first(&amp;#39;email&amp;#39;, &amp;#39;&amp;lt;p&amp;gt;:message&amp;lt;/p&amp;gt;&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; By default, messages are formatted using Bootstrap compatible syntax.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;retrieving-all-error-messages-with-a-format&quot;&gt;Retrieving All Error Messages With A Format&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;foreach ($messages-&amp;gt;all(&amp;#39;&amp;lt;li&amp;gt;:message&amp;lt;/li&amp;gt;&amp;#39;) as $message)
{
    //
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;error-messages-and-views&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;error-messages-&amp;amp;-views&quot;&gt;Error Messages &amp;amp; Views&lt;/h2&gt;

&lt;p&gt;Once you have performed validation, you will need an easy way to get the error messages back to your views. This is conveniently handled by Laravel. Consider the following routes as an example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::get(&amp;#39;register&amp;#39;, function()
{
    return View::make(&amp;#39;user.register&amp;#39;);
});

Route::post(&amp;#39;register&amp;#39;, function()
{
    $rules = [...];

    $validator = Validator::make(Input::all(), $rules);

    if ($validator-&amp;gt;fails())
    {
        return redirect(&amp;#39;register&amp;#39;)-&amp;gt;withErrors($validator);
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that when validation fails, we pass the &lt;code&gt;Validator&lt;/code&gt; instance to the Redirect using the &lt;code&gt;withErrors&lt;/code&gt; method. This method will flash the error messages to the session so that they are available on the next request.&lt;/p&gt;

&lt;p&gt;However, notice that we do not have to explicitly bind the error messages to the view in our GET route. This is because Laravel will always check for errors in the session data, and automatically bind them to the view if they are available. &lt;strong&gt;So, it is important to note that an &lt;code&gt;$errors&lt;/code&gt; variable will always be available in all of your views, on every request&lt;/strong&gt;, allowing you to conveniently assume the &lt;code&gt;$errors&lt;/code&gt; variable is always defined and can be safely used. The &lt;code&gt;$errors&lt;/code&gt; variable will be an instance of &lt;code&gt;MessageBag&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, after redirection, you may utilize the automatically bound &lt;code&gt;$errors&lt;/code&gt; variable in your view:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;?php echo $errors-&amp;gt;first(&amp;#39;email&amp;#39;); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;named-error-bags&quot;&gt;Named Error Bags&lt;/h3&gt;

&lt;p&gt;If you have multiple forms on a single page, you may wish to name the &lt;code&gt;MessageBag&lt;/code&gt; of errors. This will allow you to retrieve the error messages for a specific form. Simply pass a name as the second argument to &lt;code&gt;withErrors&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return redirect(&amp;#39;register&amp;#39;)-&amp;gt;withErrors($validator, &amp;#39;login&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You may then access the named &lt;code&gt;MessageBag&lt;/code&gt; instance from the &lt;code&gt;$errors&lt;/code&gt; variable:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;?php echo $errors-&amp;gt;login-&amp;gt;first(&amp;#39;email&amp;#39;); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;available-validation-rules&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;available-validation-rules&quot;&gt;Available Validation Rules&lt;/h2&gt;

&lt;p&gt;Below is a list of all available validation rules and their function:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#rule-accepted&quot;&gt;Accepted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-active-url&quot;&gt;Active URL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-after&quot;&gt;After (Date)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-alpha&quot;&gt;Alpha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-alpha-dash&quot;&gt;Alpha Dash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-alpha-num&quot;&gt;Alpha Numeric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-array&quot;&gt;Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-before&quot;&gt;Before (Date)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-between&quot;&gt;Between&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-boolean&quot;&gt;Boolean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-confirmed&quot;&gt;Confirmed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-date&quot;&gt;Date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-date-format&quot;&gt;Date Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-different&quot;&gt;Different&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-digits&quot;&gt;Digits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-digits-between&quot;&gt;Digits Between&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-email&quot;&gt;E-Mail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-exists&quot;&gt;Exists (Database)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-image&quot;&gt;Image (File)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-in&quot;&gt;In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-integer&quot;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-ip&quot;&gt;IP Address&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-max&quot;&gt;Max&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-mimes&quot;&gt;MIME Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-min&quot;&gt;Min&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-not-in&quot;&gt;Not In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-numeric&quot;&gt;Numeric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-regex&quot;&gt;Regular Expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-required&quot;&gt;Required&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-required-if&quot;&gt;Required If&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-required-with&quot;&gt;Required With&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-required-with-all&quot;&gt;Required With All&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-required-without&quot;&gt;Required Without&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-required-without-all&quot;&gt;Required Without All&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-same&quot;&gt;Same&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-size&quot;&gt;Size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-string&quot;&gt;String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-timezone&quot;&gt;Timezone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-unique&quot;&gt;Unique (Database)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rule-url&quot;&gt;URL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;rule-accepted&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;accepted&quot;&gt;accepted&lt;/h4&gt;

&lt;p&gt;The field under validation must be &lt;em&gt;yes&lt;/em&gt;, &lt;em&gt;on&lt;/em&gt;, &lt;em&gt;1&lt;/em&gt;, or &lt;em&gt;true&lt;/em&gt;. This is useful for validating &amp;quot;Terms of Service&amp;quot; acceptance.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-active-url&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;active_url&quot;&gt;active_url&lt;/h4&gt;

&lt;p&gt;The field under validation must be a valid URL according to the &lt;code&gt;checkdnsrr&lt;/code&gt; PHP function.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-after&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;after:date&quot;&gt;after:&lt;em&gt;date&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The field under validation must be a value after a given date. The dates will be passed into the PHP &lt;code&gt;strtotime&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-alpha&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;alpha&quot;&gt;alpha&lt;/h4&gt;

&lt;p&gt;The field under validation must be entirely alphabetic characters.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-alpha-dash&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;alpha_dash&quot;&gt;alpha_dash&lt;/h4&gt;

&lt;p&gt;The field under validation may have alpha-numeric characters, as well as dashes and underscores.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-alpha-num&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;alpha_num&quot;&gt;alpha_num&lt;/h4&gt;

&lt;p&gt;The field under validation must be entirely alpha-numeric characters.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-array&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;array&quot;&gt;array&lt;/h4&gt;

&lt;p&gt;The field under validation must be of type array.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-before&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;before:date&quot;&gt;before:&lt;em&gt;date&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The field under validation must be a value preceding the given date. The dates will be passed into the PHP &lt;code&gt;strtotime&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-between&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;between:min,max&quot;&gt;between:&lt;em&gt;min&lt;/em&gt;,&lt;em&gt;max&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The field under validation must have a size between the given &lt;em&gt;min&lt;/em&gt; and &lt;em&gt;max&lt;/em&gt;. Strings, numerics, and files are evaluated in the same fashion as the &lt;code&gt;size&lt;/code&gt; rule.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-boolean&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;boolean&quot;&gt;boolean&lt;/h4&gt;

&lt;p&gt;The field under validation must be able to be cast as a boolean. Accepted input are &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;&amp;quot;1&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-confirmed&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;confirmed&quot;&gt;confirmed&lt;/h4&gt;

&lt;p&gt;The field under validation must have a matching field of &lt;code&gt;foo_confirmation&lt;/code&gt;. For example, if the field under validation is &lt;code&gt;password&lt;/code&gt;, a matching &lt;code&gt;password_confirmation&lt;/code&gt; field must be present in the input.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-date&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;date&quot;&gt;date&lt;/h4&gt;

&lt;p&gt;The field under validation must be a valid date according to the &lt;code&gt;strtotime&lt;/code&gt; PHP function.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-date-format&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;date_format:format&quot;&gt;date_format:&lt;em&gt;format&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The field under validation must match the &lt;em&gt;format&lt;/em&gt; defined according to the &lt;code&gt;date_parse_from_format&lt;/code&gt; PHP function.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-different&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;different:field&quot;&gt;different:&lt;em&gt;field&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The given &lt;em&gt;field&lt;/em&gt; must be different than the field under validation.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-digits&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;digits:value&quot;&gt;digits:&lt;em&gt;value&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The field under validation must be &lt;em&gt;numeric&lt;/em&gt; and must have an exact length of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-digits-between&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;digits_between:min,max&quot;&gt;digits_between:&lt;em&gt;min&lt;/em&gt;,&lt;em&gt;max&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The field under validation must have a length between the given &lt;em&gt;min&lt;/em&gt; and &lt;em&gt;max&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-email&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;email&quot;&gt;email&lt;/h4&gt;

&lt;p&gt;The field under validation must be formatted as an e-mail address.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-exists&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;exists:table,column&quot;&gt;exists:&lt;em&gt;table&lt;/em&gt;,&lt;em&gt;column&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The field under validation must exist on a given database table.&lt;/p&gt;

&lt;h4 id=&quot;basic-usage-of-exists-rule&quot;&gt;Basic Usage Of Exists Rule&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;state&amp;#39; =&amp;gt; &amp;#39;exists:states&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;specifying-a-custom-column-name&quot;&gt;Specifying A Custom Column Name&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;state&amp;#39; =&amp;gt; &amp;#39;exists:states,abbreviation&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You may also specify more conditions that will be added as &amp;quot;where&amp;quot; clauses to the query:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;email&amp;#39; =&amp;gt; &amp;#39;exists:staff,email,account_id,1&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Passing &lt;code&gt;NULL&lt;/code&gt; as a &amp;quot;where&amp;quot; clause value will add a check for a &lt;code&gt;NULL&lt;/code&gt; database value:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;email&amp;#39; =&amp;gt; &amp;#39;exists:staff,email,deleted_at,NULL&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;rule-image&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;image&quot;&gt;image&lt;/h4&gt;

&lt;p&gt;The file under validation must be an image (jpeg, png, bmp, gif, or svg)&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-in&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;in:foo,bar,...&quot;&gt;in:&lt;em&gt;foo&lt;/em&gt;,&lt;em&gt;bar&lt;/em&gt;,...&lt;/h4&gt;

&lt;p&gt;The field under validation must be included in the given list of values.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-integer&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;integer&quot;&gt;integer&lt;/h4&gt;

&lt;p&gt;The field under validation must have an integer value.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-ip&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;ip&quot;&gt;ip&lt;/h4&gt;

&lt;p&gt;The field under validation must be formatted as an IP address.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-max&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;max:value&quot;&gt;max:&lt;em&gt;value&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The field under validation must be less than or equal to a maximum &lt;em&gt;value&lt;/em&gt;. Strings, numerics, and files are evaluated in the same fashion as the &lt;a href=&quot;#rule-size&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; rule.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-mimes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;mimes:foo,bar,...&quot;&gt;mimes:&lt;em&gt;foo&lt;/em&gt;,&lt;em&gt;bar&lt;/em&gt;,...&lt;/h4&gt;

&lt;p&gt;The file under validation must have a MIME type corresponding to one of the listed extensions.&lt;/p&gt;

&lt;h4 id=&quot;basic-usage-of-mime-rule&quot;&gt;Basic Usage Of MIME Rule&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;photo&amp;#39; =&amp;gt; &amp;#39;mimes:jpeg,bmp,png&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;rule-min&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;min:value&quot;&gt;min:&lt;em&gt;value&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The field under validation must have a minimum &lt;em&gt;value&lt;/em&gt;. Strings, numerics, and files are evaluated in the same fashion as the &lt;a href=&quot;#rule-size&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; rule.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-not-in&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;not_in:foo,bar,...&quot;&gt;not_in:&lt;em&gt;foo&lt;/em&gt;,&lt;em&gt;bar&lt;/em&gt;,...&lt;/h4&gt;

&lt;p&gt;The field under validation must not be included in the given list of values.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-numeric&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;numeric&quot;&gt;numeric&lt;/h4&gt;

&lt;p&gt;The field under validation must have a numeric value.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-regex&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;regex:pattern&quot;&gt;regex:&lt;em&gt;pattern&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The field under validation must match the given regular expression.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When using the &lt;code&gt;regex&lt;/code&gt; pattern, it may be necessary to specify rules in an array instead of using pipe delimiters, especially if the regular expression contains a pipe character.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-required&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;required&quot;&gt;required&lt;/h4&gt;

&lt;p&gt;The field under validation must be present in the input data.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-required-if&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;required_if:field,value,...&quot;&gt;required_if:&lt;em&gt;field&lt;/em&gt;,&lt;em&gt;value&lt;/em&gt;,...&lt;/h4&gt;

&lt;p&gt;The field under validation must be present if the &lt;em&gt;field&lt;/em&gt; field is equal to any &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-required-with&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;required_with:foo,bar,...&quot;&gt;required_with:&lt;em&gt;foo&lt;/em&gt;,&lt;em&gt;bar&lt;/em&gt;,...&lt;/h4&gt;

&lt;p&gt;The field under validation must be present &lt;em&gt;only if&lt;/em&gt; any of the other specified fields are present.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-required-with-all&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;required_with_all:foo,bar,...&quot;&gt;required_with_all:&lt;em&gt;foo&lt;/em&gt;,&lt;em&gt;bar&lt;/em&gt;,...&lt;/h4&gt;

&lt;p&gt;The field under validation must be present &lt;em&gt;only if&lt;/em&gt; all of the other specified fields are present.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-required-without&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;required_without:foo,bar,...&quot;&gt;required_without:&lt;em&gt;foo&lt;/em&gt;,&lt;em&gt;bar&lt;/em&gt;,...&lt;/h4&gt;

&lt;p&gt;The field under validation must be present &lt;em&gt;only when&lt;/em&gt; any of the other specified fields are not present.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-required-without-all&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;required_without_all:foo,bar,...&quot;&gt;required_without_all:&lt;em&gt;foo&lt;/em&gt;,&lt;em&gt;bar&lt;/em&gt;,...&lt;/h4&gt;

&lt;p&gt;The field under validation must be present &lt;em&gt;only when&lt;/em&gt; all of the other specified fields are not present.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-same&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;same:field&quot;&gt;same:&lt;em&gt;field&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The given &lt;em&gt;field&lt;/em&gt; must match the field under validation.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-size&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;size:value&quot;&gt;size:&lt;em&gt;value&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The field under validation must have a size matching the given &lt;em&gt;value&lt;/em&gt;. For string data, &lt;em&gt;value&lt;/em&gt; corresponds to the number of characters. For numeric data, &lt;em&gt;value&lt;/em&gt; corresponds to a given integer value. For files, &lt;em&gt;size&lt;/em&gt; corresponds to the file size in kilobytes.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-string&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;string:value&quot;&gt;string:&lt;em&gt;value&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The field under validation must be a string type.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-timezone&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;timezone&quot;&gt;timezone&lt;/h4&gt;

&lt;p&gt;The field under validation must be a valid timezone identifier according to the &lt;code&gt;timezone_identifiers_list&lt;/code&gt; PHP function.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-unique&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;unique:table,column,except,idcolumn&quot;&gt;unique:&lt;em&gt;table&lt;/em&gt;,&lt;em&gt;column&lt;/em&gt;,&lt;em&gt;except&lt;/em&gt;,&lt;em&gt;idColumn&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The field under validation must be unique on a given database table. If the &lt;code&gt;column&lt;/code&gt; option is not specified, the field name will be used.&lt;/p&gt;

&lt;p&gt;Occasionally, you may need to set a custom connection for database queries made by the Validator. As seen above, setting &lt;code&gt;unique:users&lt;/code&gt; as a validation rule will use the default database connection to query the database. To override this, do the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$verifier = App::make(&amp;#39;validation.presence&amp;#39;);

$verifier-&amp;gt;setConnection(&amp;#39;connectionName&amp;#39;);

$validator = Validator::make($input, [
    &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;required&amp;#39;,
    &amp;#39;password&amp;#39; =&amp;gt; &amp;#39;required|min:8&amp;#39;,
    &amp;#39;email&amp;#39; =&amp;gt; &amp;#39;required|email|unique:users&amp;#39;,
]);

$validator-&amp;gt;setPresenceVerifier($verifier);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;basic-usage-of-unique-rule&quot;&gt;Basic Usage Of Unique Rule&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;email&amp;#39; =&amp;gt; &amp;#39;unique:users&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;specifying-a-custom-column-name&quot;&gt;Specifying A Custom Column Name&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;email&amp;#39; =&amp;gt; &amp;#39;unique:users,email_address&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;forcing-a-unique-rule-to-ignore-a-given-id&quot;&gt;Forcing A Unique Rule To Ignore A Given ID&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;email&amp;#39; =&amp;gt; &amp;#39;unique:users,email_address,10&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;adding-additional-where-clauses&quot;&gt;Adding Additional Where Clauses&lt;/h4&gt;

&lt;p&gt;You may also specify more conditions that will be added as &amp;quot;where&amp;quot; clauses to the query:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;email&amp;#39; =&amp;gt; &amp;#39;unique:users,email_address,NULL,id,account_id,1&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the rule above, only rows with an &lt;code&gt;account_id&lt;/code&gt; of &lt;code&gt;1&lt;/code&gt; would be included in the unique check.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;rule-url&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;url&quot;&gt;url&lt;/h4&gt;

&lt;p&gt;The field under validation must be formatted as an URL.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This function uses PHP&amp;#39;s &lt;code&gt;filter_var&lt;/code&gt; method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;conditionally-adding-rules&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conditionally-adding-rules&quot;&gt;Conditionally Adding Rules&lt;/h2&gt;

&lt;p&gt;In some situations, you may wish to run validation checks against a field &lt;strong&gt;only&lt;/strong&gt; if that field is present in the input array. To quickly accomplish this, add the &lt;code&gt;sometimes&lt;/code&gt; rule to your rule list:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$v = Validator::make($data, [
    &amp;#39;email&amp;#39; =&amp;gt; &amp;#39;sometimes|required|email&amp;#39;,
]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the example above, the &lt;code&gt;email&lt;/code&gt; field will only be validated if it is present in the &lt;code&gt;$data&lt;/code&gt; array.&lt;/p&gt;

&lt;h4 id=&quot;complex-conditional-validation&quot;&gt;Complex Conditional Validation&lt;/h4&gt;

&lt;p&gt;Sometimes you may wish to require a given field only if another field has a greater value than 100. Or you may need two fields to have a given value only when another field is present. Adding these validation rules doesn&amp;#39;t have to be a pain. First, create a &lt;code&gt;Validator&lt;/code&gt; instance with your &lt;em&gt;static rules&lt;/em&gt; that never change:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$v = Validator::make($data, [
    &amp;#39;email&amp;#39; =&amp;gt; &amp;#39;required|email&amp;#39;,
    &amp;#39;games&amp;#39; =&amp;gt; &amp;#39;required|numeric&amp;#39;,
]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s assume our web application is for game collectors. If a game collector registers with our application and they own more than 100 games, we want them to explain why they own so many games. For example, perhaps they run a game re-sell shop, or maybe they just enjoy collecting. To conditionally add this requirement, we can use the &lt;code&gt;sometimes&lt;/code&gt; method on the &lt;code&gt;Validator&lt;/code&gt; instance.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$v-&amp;gt;sometimes(&amp;#39;reason&amp;#39;, &amp;#39;required|max:500&amp;#39;, function($input)
{
    return $input-&amp;gt;games &amp;gt;= 100;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first argument passed to the &lt;code&gt;sometimes&lt;/code&gt; method is the name of the field we are conditionally validating. The second argument is the rules we want to add. If the &lt;code&gt;Closure&lt;/code&gt; passed as the third argument returns &lt;code&gt;true&lt;/code&gt;, the rules will be added. This method makes it a breeze to build complex conditional validations. You may even add conditional validations for several fields at once:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$v-&amp;gt;sometimes([&amp;#39;reason&amp;#39;, &amp;#39;cost&amp;#39;], &amp;#39;required&amp;#39;, function($input)
{
    return $input-&amp;gt;games &amp;gt;= 100;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;$input&lt;/code&gt; parameter passed to your &lt;code&gt;Closure&lt;/code&gt; will be an instance of &lt;code&gt;Illuminate\Support\Fluent&lt;/code&gt; and may be used as an object to access your input and files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;custom-error-messages&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;custom-error-messages&quot;&gt;Custom Error Messages&lt;/h2&gt;

&lt;p&gt;If needed, you may use custom error messages for validation instead of the defaults. There are several ways to specify custom messages.&lt;/p&gt;

&lt;h4 id=&quot;passing-custom-messages-into-validator&quot;&gt;Passing Custom Messages Into Validator&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$messages = [
    &amp;#39;required&amp;#39; =&amp;gt; &amp;#39;The :attribute field is required.&amp;#39;,
];

$validator = Validator::make($input, $rules, $messages);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The &lt;code&gt;:attribute&lt;/code&gt; place-holder will be replaced by the actual name of the field under validation. You may also utilize other place-holders in validation messages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;other-validation-place-holders&quot;&gt;Other Validation Place-Holders&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$messages = [
    &amp;#39;same&amp;#39;    =&amp;gt; &amp;#39;The :attribute and :other must match.&amp;#39;,
    &amp;#39;size&amp;#39;    =&amp;gt; &amp;#39;The :attribute must be exactly :size.&amp;#39;,
    &amp;#39;between&amp;#39; =&amp;gt; &amp;#39;The :attribute must be between :min - :max.&amp;#39;,
    &amp;#39;in&amp;#39;      =&amp;gt; &amp;#39;The :attribute must be one of the following types: :values&amp;#39;,
];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;specifying-a-custom-message-for-a-given-attribute&quot;&gt;Specifying A Custom Message For A Given Attribute&lt;/h4&gt;

&lt;p&gt;Sometimes you may wish to specify a custom error messages only for a specific field:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$messages = [
    &amp;#39;email.required&amp;#39; =&amp;gt; &amp;#39;We need to know your e-mail address!&amp;#39;,
];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;localization&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;specifying-custom-messages-in-language-files&quot;&gt;Specifying Custom Messages In Language Files&lt;/h4&gt;

&lt;p&gt;In some cases, you may wish to specify your custom messages in a language file instead of passing them directly to the &lt;code&gt;Validator&lt;/code&gt;. To do so, add your messages to &lt;code&gt;custom&lt;/code&gt; array in the &lt;code&gt;resources/lang/xx/validation.php&lt;/code&gt; language file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;custom&amp;#39; =&amp;gt; [
    &amp;#39;email&amp;#39; =&amp;gt; [
        &amp;#39;required&amp;#39; =&amp;gt; &amp;#39;We need to know your e-mail address!&amp;#39;,
    ],
],
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;custom-validation-rules&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;custom-validation-rules&quot;&gt;Custom Validation Rules&lt;/h2&gt;

&lt;h4 id=&quot;registering-a-custom-validation-rule&quot;&gt;Registering A Custom Validation Rule&lt;/h4&gt;

&lt;p&gt;Laravel provides a variety of helpful validation rules; however, you may wish to specify some of your own. One method of registering custom validation rules is using the &lt;code&gt;Validator::extend&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Validator::extend(&amp;#39;foo&amp;#39;, function($attribute, $value, $parameters)
{
    return $value == &amp;#39;foo&amp;#39;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The custom validator Closure receives three arguments: the name of the &lt;code&gt;$attribute&lt;/code&gt; being validated, the &lt;code&gt;$value&lt;/code&gt; of the attribute, and an array of &lt;code&gt;$parameters&lt;/code&gt; passed to the rule.&lt;/p&gt;

&lt;p&gt;You may also pass a class and method to the &lt;code&gt;extend&lt;/code&gt; method instead of a Closure:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Validator::extend(&amp;#39;foo&amp;#39;, &amp;#39;FooValidator@validate&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that you will also need to define an error message for your custom rules. You can do so either using an inline custom message array or by adding an entry in the validation language file.&lt;/p&gt;

&lt;h4 id=&quot;extending-the-validator-class&quot;&gt;Extending The Validator Class&lt;/h4&gt;

&lt;p&gt;Instead of using Closure callbacks to extend the Validator, you may also extend the Validator class itself. To do so, write a Validator class that extends &lt;code&gt;Illuminate\Validation\Validator&lt;/code&gt;. You may add validation methods to the class by prefixing them with &lt;code&gt;validate&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;?php

class CustomValidator extends Illuminate\Validation\Validator {

    public function validateFoo($attribute, $value, $parameters)
    {
        return $value == &amp;#39;foo&amp;#39;;
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;registering-a-custom-validator-resolver&quot;&gt;Registering A Custom Validator Resolver&lt;/h4&gt;

&lt;p&gt;Next, you need to register your custom Validator extension:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Validator::resolver(function($translator, $data, $rules, $messages)
{
    return new CustomValidator($translator, $data, $rules, $messages);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When creating a custom validation rule, you may sometimes need to define custom place-holder replacements for error messages. You may do so by creating a custom Validator as described above, and adding a &lt;code&gt;replaceXXX&lt;/code&gt; function to the validator.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;protected function replaceFoo($message, $attribute, $rule, $parameters)
{
    return str_replace(&amp;#39;:foo&amp;#39;, $parameters[0], $message);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you would like to add a custom message &amp;quot;replacer&amp;quot; without extending the &lt;code&gt;Validator&lt;/code&gt; class, you may use the &lt;code&gt;Validator::replacer&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Validator::replacer(&amp;#39;rule&amp;#39;, function($message, $attribute, $rule, $parameters)
{
    //
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Sat, 09 May 2015 00:00:00 +0900</pubDate>
        <link>http://www.xpressengine.com/docs/5.0/validation</link>
        <guid isPermaLink="true">http://www.xpressengine.com/docs/5.0/validation</guid>
        
        
        <category>5.0</category>
        
      </item>
    
      <item>
        <title>업그레이드 가이드(Upgrade Guide)</title>
        <description>&lt;h1 id=&quot;업그레이드-가이드(upgrade-guide)&quot;&gt;업그레이드 가이드(Upgrade Guide)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#upgrade-5.0.16&quot;&gt;Upgrading To 5.0.16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgrade-5.0&quot;&gt;Upgrading To 5.0 From 4.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgrade-4.2&quot;&gt;Upgrading To 4.2 From 4.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgrade-4.1.29&quot;&gt;Upgrading To 4.1.29 From &amp;lt;= 4.1.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgrade-4.1.26&quot;&gt;Upgrading To 4.1.26 From &amp;lt;= 4.1.25&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgrade-4.1&quot;&gt;Upgrading To 4.1 From 4.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;upgrade-5.0.16&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;5.0.16으로-업그레이드&quot;&gt;5.0.16으로 업그레이드&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;bootstrap/autoload&lt;/code&gt; 파일에서 &lt;code&gt;$compiledPath&lt;/code&gt; 변수를 다음처럼 변경합니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$compiledPath = __DIR__.&amp;#39;/../vendor/compiled.php&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;upgrade-5.0&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;4.2에서-5.0으로-업그레이드&quot;&gt;4.2에서 5.0으로 업그레이드&lt;/h2&gt;

&lt;h3 id=&quot;새로-설치후-마이그레이션-하기&quot;&gt;새로 설치후 마이그레이션 하기&lt;/h3&gt;

&lt;p&gt;업그레이드에 대한 권장사항은 새롭게 라라벨 &lt;code&gt;5.0&lt;/code&gt; 버전을 인스톨하고 &lt;code&gt;4.2&lt;/code&gt; 버전의 사이트의 고유한 어플리케이션 파일들을 새로운 어플리케이션에 복사하라는 것입니다. 여기에는 컨트롤러, 라우트, 엘로퀀트 모델들, 아티즌 명령어들, asset 파일들 그리고 어플리케이션에 지정된 기타 코드들을 포함합니다.&lt;/p&gt;

&lt;p&gt;업그레이드를 시작하기 위해서 로컬 환경의 새로운 디렉토리에 &lt;a href=&quot;/docs/5.0/installation&quot;&gt;라라벨 5 어플리케이션을 설치&lt;/a&gt;합니다. 업그레이드를 위한 각 단계의 진행에 대해서 차근차근 알아보겠습니다. &lt;/p&gt;

&lt;h3 id=&quot;컴포저-의존성-&amp;amp;-패키지&quot;&gt;컴포저 의존성 &amp;amp; 패키지&lt;/h3&gt;

&lt;p&gt;설치된 5.0 버전의 어플리케이션에 추가적인 컴포저 의존 패키지들을 복사해 넣는 것을 잊지 마십시오. 여기에는 SDK와 같은 서드 파티 코드도 포함됩니다.&lt;/p&gt;

&lt;p&gt;라라벨5가 릴리즈 된 이후 바로는 라라벨과 연동되는 일부 패키지는 라라벨5와 호환이 되지 않는수도 있습니다. 패키지의 제작자에게 라라벨5 버전에 대한 대응계획을 확인합니다. 컴포저에 어플리케이션을 위한 추가적인 의존 패키지를 추가하였다면 &lt;code&gt;composer updata&lt;/code&gt; 를 실행 해야 합니다. &lt;/p&gt;

&lt;h3 id=&quot;네임스페이스&quot;&gt;네임스페이스&lt;/h3&gt;

&lt;p&gt;라라벨 4에서는 기본적으로 어플리케이션의 코드에 네임스페이스가 구성되어 있지 않았습니다. 그래서 예를 들면 모든 Eloquent 모델들과 컨트롤러는 &amp;quot;글로벌&amp;quot; 네임스페이스 영역에 해당되었습니다. 빠른 전환을 위해서는 라라벨5에서도 마찬가지로 글로벌 네임스페이스 안에 이 클래스들을 지정되도록 합니다. &lt;/p&gt;

&lt;h3 id=&quot;설정&quot;&gt;설정&lt;/h3&gt;

&lt;h4 id=&quot;마이그레이션-환경-변수&quot;&gt;마이그레이션 환경 변수&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;.env.example&lt;/code&gt; 파일을 복사하여 이전 버전에서 &lt;code&gt;.env.php&lt;/code&gt; 파일과 동일한 역활을 하는 &lt;code&gt;5.0의&lt;/code&gt;.env&lt;code&gt;파일을 생성합니다.&lt;/code&gt;APP_ENV&lt;code&gt;와&lt;/code&gt;APP_KEY` (암호화 키), 데이터 베이스 연결 정보, 캐시 그리고 세션 드라이버와 같은 어플리케이션에서 사용가능항 설정 값들을 지정할 수 있습니다. &lt;/p&gt;

&lt;p&gt;추가적으로 이전버전의 &lt;code&gt;.env.php&lt;/code&gt; 파일에 들어 있던 사용자가 지정한 값들을 &lt;code&gt;.env&lt;/code&gt; 파일(실제 로컬 환경을 위한 값 설정) 과 &lt;code&gt;.env.example&lt;/code&gt; 파일 (다른 팀 구성원들이 참고할 샘플 값)에 복사합니다.)에 복사해 넣습니다. &lt;/p&gt;

&lt;p&gt;환경 설정과 관련된 보다 자세한 내용은 &lt;a href=&quot;/docs/5.0/configuration#environment-configuration&quot;&gt;관련 문서&lt;/a&gt;를 확인하십시오. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;주의&lt;/strong&gt; 라라벨5 어플리케이션을 실제 제품 서버에 배포하기 전에 적절한 값을 지정한 &lt;code&gt;.env&lt;/code&gt; 파일을 준비해 둘 필요가 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;설정-파일들&quot;&gt;설정 파일들&lt;/h4&gt;

&lt;p&gt;라라벨 5.0은 더이상 &lt;code&gt;app/config/{구동환경의이름}/&lt;/code&gt; 디렉토리를 주어진 구동 환경에 대한 설정파일로 사용하지 않습니다. 대신에  구동 환경에 의해 달라지는 설정 값들을 &lt;code&gt;.env&lt;/code&gt; 파일로 이동 시켰습니다. 그리고 나서 설정 파일 안에서 &lt;code&gt;env(‘키’, ‘기본값’)&lt;/code&gt; 의 형태로 해당 값들에 엑세스 합니다. &lt;code&gt;config/database.php&lt;/code&gt; 설정 파일에서 이러한 사용예를 확인할 수 있습니다. &lt;/p&gt;

&lt;p&gt;구동환경과 관계 없이 변하지 않는 값들과 또는 &lt;code&gt;env()&lt;/code&gt; 를 통해서 여러분의 로컬 환경에 의해서 변화하는 값 두가지들에 대한 설정 값들을 &lt;code&gt;config/&lt;/code&gt; 디렉토리안에 들어 있는 설정 파일들에 지정합니다. &lt;/p&gt;

&lt;p&gt;기억하십시오 만약 여러분이 &lt;code&gt;.env&lt;/code&gt; 파일에 추가적인 키들을 추가하였다면, 마찬가지로 &lt;code&gt;.env.exampl&lt;/code&gt; 파일에도 추가합니다. 여러분의 팀 동료들이 이를 참고하여 손쉽게 자신의 &lt;code&gt;.env&lt;/code&gt; 파일을 생성하는데 도움이 될 것입니다. &lt;/p&gt;

&lt;h3 id=&quot;라우트&quot;&gt;라우트&lt;/h3&gt;

&lt;p&gt;이전 버전의 &lt;code&gt;routes.php&lt;/code&gt; 파일의 내용을 새로운 &lt;code&gt;app/Http/routes.php&lt;/code&gt; 파일에 복사해 넣습니다. &lt;/p&gt;

&lt;h3 id=&quot;컨트롤러&quot;&gt;컨트롤러&lt;/h3&gt;

&lt;p&gt;다음으로 모든 컨트롤러들을 &lt;code&gt;app/Http/Controllers&lt;/code&gt; 디렉토리로 옮깁니다. 이 가이드에서는 네임스페이스를 사용하도록 변경하지 않기 때문에, &lt;code&gt;app/Http/Controllers&lt;/code&gt; 디렉토리를 &lt;code&gt;composer.json&lt;/code&gt; 파일의 &lt;code&gt;classmap&lt;/code&gt; 여역에 추가합니다. 그런 다음 &lt;code&gt;app/Http/Controllers/Controller.php&lt;/code&gt; 추상  클래스에서 네임스페이스를 제거합니다. 마이그레이션된 컨트롤러가 기본 클래스를 상속 받고 있는지 확인합니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/Providers/RouteServiceProvider.php&lt;/code&gt; 파일 내부에서 &lt;code&gt;namespace&lt;/code&gt; 속성을 &lt;code&gt;null&lt;/code&gt; 로 설정합니다.&lt;/p&gt;

&lt;h3 id=&quot;라우트-필터&quot;&gt;라우트 필터&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;app/filters.php&lt;/code&gt; 파일에 있던 필터 바인딩들을 &lt;code&gt;app/Providers/RouteServiceProvider.php&lt;/code&gt;파일의 &lt;code&gt;boot()&lt;/code&gt; 메소드에 복사합니다. &lt;code&gt;app/Providers/RouteServiceProvider.php&lt;/code&gt; 파일에 &lt;code&gt;use Illuminate\Support\Facades\Route;&lt;/code&gt;를 추가하여 &lt;code&gt;Route&lt;/code&gt; 파사드를 사용할 수 있도록 합니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;auth&lt;/code&gt; 와 &lt;code&gt;csrf&lt;/code&gt; 와 같은 기본적인 라라벨 4.0의 필터는 미들웨어로 변경되었기 때문에 따로 옮길 필요가 없습니다. 이전의 기본 필터들(예를 들어 &lt;code&gt;[&amp;#39;before&amp;#39; =&amp;gt; &amp;#39;auth&amp;#39;]&lt;/code&gt;) 을 참조하는 라우트나 컨트롤러들을 수정하여 새로운 미들웨어(예를 들어 &lt;code&gt;[&amp;#39;middleware&amp;#39; =&amp;gt; &amp;#39;auth’].&lt;/code&gt;)를 참조 하도록 변경합니다. &lt;/p&gt;

&lt;p&gt;필터는 라라벨5에서 삭제되지 않았습니다. 여러분은 여전히 &lt;code&gt;before&lt;/code&gt; 와 &lt;code&gt;after&lt;/code&gt; 를 사용하여 사용자 정의 필터를 지정하고 사용할 수 있습니다. &lt;/p&gt;

&lt;h3 id=&quot;전역-csrf&quot;&gt;전역 CSRF&lt;/h3&gt;

&lt;p&gt;기본적으로 &lt;a href=&quot;/docs/5.0/routing#csrf-protection&quot;&gt;CSRF 방지&lt;/a&gt; 가 전체 라우트에서 활성화되어 있습니다. 이를 비활성화 시키거나 특정 라우트에서만 수동으로 활성화하고자한다면 &lt;code&gt;App\Http\Kernel&lt;/code&gt;파일의  &lt;code&gt;middleware&lt;/code&gt; 배열에서 다음 미들웨어를 삭제합니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;App\Http\Middleware\VerifyCsrfToken&amp;#39;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다른곳에서 사용하기 위해서 삭제한 라인을 &lt;code&gt;$routeMiddleware&lt;/code&gt; 에 추가합니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;csrf&amp;#39; =&amp;gt; &amp;#39;App\Http\Middleware\VerifyCsrfToken&amp;#39;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 개별 라우트 / 컨트롤러에 대해서 &lt;code&gt;[&amp;#39;middleware&amp;#39; =&amp;gt; &amp;#39;csrf&amp;#39;]&lt;/code&gt; 와 같이 미들웨어를 지정할 수 있습니다. 미들웨어에 대한 보다 자세한 사항은 &lt;a href=&quot;/docs/5.0/middleware&quot;&gt;미들웨어 문서&lt;/a&gt;를 참고하십시오. &lt;/p&gt;

&lt;h3 id=&quot;eloquent-모델&quot;&gt;Eloquent 모델&lt;/h3&gt;

&lt;p&gt;Eloquent 모델을 모아두기 위한 &lt;code&gt;app/Models&lt;/code&gt; 디렉토리를 생성합니다. 그런다음에 이 디렉토리를 &lt;code&gt;composer.json&lt;/code&gt; 파일의 &lt;code&gt;classmap&lt;/code&gt; 에 추가합니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;SoftDeletingTrait&lt;/code&gt; 을 사용하는 모델은  &lt;code&gt;Illuminate\Database\Eloquent\SoftDeletes&lt;/code&gt;을 사용하도록 변경합니다. &lt;/p&gt;

&lt;h4 id=&quot;eloquent-캐싱&quot;&gt;Eloquent 캐싱&lt;/h4&gt;

&lt;p&gt;Eloquent 는 더이상 쿼리 캐시를 위한 &lt;code&gt;remember&lt;/code&gt; 메소드를 제공하지 않습니다. 여러분은 이제 &lt;code&gt;Cache::remember&lt;/code&gt; 함수를 사용하여 수동으로 쿼리를 캐싱해야 합니다. 캐시와 관련된 보다 자세한 정보는 &lt;a href=&quot;/docs/5.0/cache&quot;&gt;해당 문서&lt;/a&gt;를 참고하십시오. &lt;/p&gt;

&lt;h3 id=&quot;사용자-인증-모델&quot;&gt;사용자 인증 모델&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;User&lt;/code&gt; 모델을 라라벨5의 인증 시스템 용으로 업그레이드 하려면 다음과 같이 하면 됩니다:&lt;/p&gt;

&lt;p&gt;** 다음의 &lt;code&gt;use&lt;/code&gt; 블럭을 삭제합니다 :**&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;use Illuminate\Auth\UserInterface;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;use Illuminate\Auth\Reminders\RemindableInterface;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;** 다음의 &lt;code&gt;use&lt;/code&gt; 블럭을 추가합니다:**&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;use Illuminate\Auth\Authenticatable;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;use Illuminate\Auth\Passwords\CanResetPassword;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;use Illuminate\Contracts\Auth\Authenticatable as AuthenticatableContract;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;use Illuminate\Contracts\Auth\CanResetPassword as CanResetPasswordContract;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;**UserInterface와 RemindableInterface 인터페이스를 제거합니다. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;클래스가 다음의 인터페이스들을 구현하도록 선언합니다:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;implements AuthenticatableContract, CanResetPasswordContract&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;클래스 선언부분 안에서 다음의 trait들을 사용하도록 합니다:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;use Authenticatable, CanResetPassword;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;**이 방법을 사용하면, 클래스의 선언부분의 use 블록에서 &lt;code&gt;Illuminate\Auth\Reminders\RemindableTrait&lt;/code&gt; 와 &lt;code&gt;Illuminate\Auth\UserTrait&lt;/code&gt;를 제거합니다.&lt;/p&gt;

&lt;h3 id=&quot;캐셔-변경사항&quot;&gt;캐셔 변경사항&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/docs/5.0/billing&quot;&gt;라라벨 캐셔&lt;/a&gt;의 trait 과 인터페이스의 이름이 변경되었습니다.  &lt;code&gt;BillableTrait&lt;/code&gt; 대신 &lt;code&gt;Laravel\Cashier\Billable&lt;/code&gt; trait을 사용합니다. 그리고 &lt;code&gt;Laravel\Cashier\BillableInterface&lt;/code&gt; 대신에 &lt;code&gt;Laravel\Cashier\Contracts\Billable&lt;/code&gt; 인터페이스를 사용합니다. 다른 메소드는 변경되지 않았습니다. &lt;/p&gt;

&lt;h3 id=&quot;아티즌-명령어들&quot;&gt;아티즌 명령어들&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;app/commands&lt;/code&gt; 디렉토리의 모든 커맨드 클래스드들을 새로운 &lt;code&gt;app/Console/Commands&lt;/code&gt; 디렉토리로 이옮깁니다. 그다음에 &lt;code&gt;composer.json&lt;/code&gt; 파일의 &lt;code&gt;classmap&lt;/code&gt; 에 &lt;code&gt;app/Console/Commands&lt;/code&gt; 을 추가합니다. &lt;/p&gt;

&lt;p&gt;그리고 &lt;code&gt;start/artisan.php&lt;/code&gt; 파일의 아티즌 명령어 리스트를 &lt;code&gt;app/Console/Kernel.php&lt;/code&gt; 파일의 &lt;code&gt;commands&lt;/code&gt; 배열에 복사합니다. &lt;/p&gt;

&lt;h3 id=&quot;데이터베이스-마이그레이션-&amp;amp;-시딩&quot;&gt;데이터베이스 마이그레이션 &amp;amp; 시딩&lt;/h3&gt;

&lt;p&gt;데이터베이스에 이미 user 테이블에 존재하기 때문에 라라벨 5.0에 포함된 두개의 마이그레이션 파일을 삭제 합니다. &lt;/p&gt;

&lt;p&gt;이전 &lt;code&gt;app/database/migrations&lt;/code&gt; 디렉토리의 모든 마이그레이션 클래스들을 새로운 &lt;code&gt;database/migrations&lt;/code&gt; 디렉토리로 옮깁니다. 시드 파일들은 &lt;code&gt;app/database/seeds&lt;/code&gt; 에서 &lt;code&gt;database/seeds&lt;/code&gt; 로 옮깁니다. &lt;/p&gt;

&lt;h3 id=&quot;글로벌-ioc-바인딩&quot;&gt;글로벌 IoC 바인딩&lt;/h3&gt;

&lt;p&gt;만약 &lt;code&gt;start/global.php&lt;/code&gt; 파일에 &lt;a href=&quot;/docs/5.0/container&quot;&gt;IoC&lt;/a&gt; 바인딩들을 가지고 있었다면, &lt;code&gt;app/Providers/AppServiceProvider.php&lt;/code&gt;의 &lt;code&gt;register&lt;/code&gt; 메소드로 옮깁니다. &lt;code&gt;App&lt;/code&gt; 파사드를 사용해야할 것입니다. &lt;/p&gt;

&lt;p&gt;옵션으로, 바인딩들을 해당하는 개별 서비스 프로바이더에 나누어 옮길 수도있습니다. &lt;/p&gt;

&lt;h3 id=&quot;뷰&quot;&gt;뷰&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;app/views&lt;/code&gt; 디렉토리의 뷰 파일들을 &lt;code&gt;resources/views&lt;/code&gt; 디렉토리로 옮깁니다&lt;/p&gt;

&lt;h3 id=&quot;블레이드-태그-변경&quot;&gt;블레이드 태그 변경&lt;/h3&gt;

&lt;p&gt;보안을 기본적으로 강화하기 위해서 라라벨5에서는 &lt;code&gt;{{ }}&lt;/code&gt; 와 &lt;code&gt;{{{ }}}&lt;/code&gt; 구문에서 모든 출력을 escape 합니다. 새로운 &lt;code&gt;{!! !!}&lt;/code&gt; 구문이 escape 되지 않은 출력을 위해서 사용되어 집니다. 어플리케이션을 업데이트 할 때 가장 안전한 선택은 이전처럼 출력하기 위해서 기존 구문들을 &lt;code&gt;{!! !!}&lt;/code&gt; 표기 방식으로 사용하는 것입니다. &lt;/p&gt;

&lt;p&gt;하지만 여러분이 &lt;strong&gt;반드시&lt;/strong&gt; 이전 버전의 블레이드 문법을 사용해야 한다면 &lt;code&gt;AppServiceProvider@register&lt;/code&gt; 의 마지막에 다음 라인들을 추가하면 됩니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;\Blade::setRawTags(&amp;#39;{{&amp;#39;, &amp;#39;}}&amp;#39;);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;\Blade::setContentTags(&amp;#39;{{{&amp;#39;, &amp;#39;}}}&amp;#39;);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;\Blade::setEscapedContentTags(&amp;#39;{{{&amp;#39;, &amp;#39;}}}&amp;#39;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하는 것이 편리한것만은 아니며 XSS 공격에 대해서 어플리케이션이 취약해질 수도 있습니다. 
또한 코멘트와 &lt;code&gt;{{--&lt;/code&gt; 는 더이상 동작하지 않습니다. &lt;/p&gt;

&lt;h3 id=&quot;다국어-파일&quot;&gt;다국어 파일&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;app/lang&lt;/code&gt; 디렉토리의 언어 파일들을 &lt;code&gt;resources/lang&lt;/code&gt; 디렉토리로 옮깁니다&lt;/p&gt;

&lt;h3 id=&quot;public-디렉토리&quot;&gt;public 디렉토리&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;4.2&lt;/code&gt; 어플리케이션의 &lt;code&gt;public&lt;/code&gt; 디렉토리에 들어 있던 asset 파일들을 새로운 어플리케이션의 &lt;code&gt;public&lt;/code&gt; 디렉토리로 복사해 넣습니다. &lt;code&gt;index.php&lt;/code&gt;의 &lt;code&gt;5.0&lt;/code&gt; 버전을 유지해야 합니다.&lt;/p&gt;

&lt;h3 id=&quot;테스트파일&quot;&gt;테스트파일&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;app/tests&lt;/code&gt; 폴더의 테스트 파일들을 &lt;code&gt;tests&lt;/code&gt; 디렉토리로 옮깁니다. &lt;/p&gt;

&lt;h3 id=&quot;기타-파일들&quot;&gt;기타 파일들&lt;/h3&gt;

&lt;p&gt;프로젝트의 다른 파일들을 복사합니다. 예를 들어 &lt;code&gt;.scrutinizer.yml&lt;/code&gt;, &lt;code&gt;bower.json&lt;/code&gt; 그리고 다를 비슷한 도구 관련 설정 파일 등입니다. &lt;/p&gt;

&lt;p&gt;Sass 나 Less, CoffeeScript 파일들을 원하는 위치로 이동합시다. &lt;code&gt;resources/assets&lt;/code&gt; 디렉토리가 기본 위치로 적당할 것입니다. &lt;/p&gt;

&lt;h3 id=&quot;form-&amp;amp;-html-헬퍼&quot;&gt;Form &amp;amp; HTML 헬퍼&lt;/h3&gt;

&lt;p&gt;만약 Form 이나 HTML 헬퍼를 사용중이었다면 &lt;code&gt;class &amp;#39;Form&amp;#39; not found&lt;/code&gt; 또는 &lt;code&gt;class &amp;#39;Html&amp;#39; not found&lt;/code&gt;와 같은 에러 메세지를 확인할 수 있을 것입니다. Form 과 HTML 헬퍼는 라라벨 5.0에서 더이상 제공하지 않습니다. 하지만 별도의 &lt;a href=&quot;http://laravelcollective.com/docs/5.0/html&quot;&gt;Laravel Collective&lt;/a&gt; 커뮤니티가 주관하는 대체 시스템이 있습니다. &lt;/p&gt;

&lt;p&gt;예를 들자면 &lt;code&gt;composer.json&lt;/code&gt; 의 &lt;code&gt;require&lt;/code&gt; 영역에 &lt;code&gt;&amp;quot;laravelcollective/html&amp;quot;: &amp;quot;~5.0&amp;quot;&lt;/code&gt;를 추가할 수도 있습니다 .&lt;/p&gt;

&lt;p&gt;또한 Form 과 HTML 파사드와 서비스 프로바이더가 필요할 것입니다. &lt;code&gt;config/app.php&lt;/code&gt; 를 수정하여 &amp;#39;providers&amp;#39; 배열에 다음 라인을 추가하십시오. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;Collective\Html\HtmlServiceProvider&amp;#39;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음으로 &amp;#39;aliases&amp;#39; 배열에 다음라인들을 추가합니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;Form&amp;#39; =&amp;gt; &amp;#39;Collective\Html\FormFacade&amp;#39;,
&amp;#39;Html&amp;#39; =&amp;gt; &amp;#39;Collective\Html\HtmlFacade&amp;#39;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;캐시-매니저&quot;&gt;캐시 매니저&lt;/h3&gt;

&lt;p&gt;어플리케이션에서 라라벨 캐시를 파사드가 아닌 &lt;code&gt;Illuminate\Cache\CacheManager&lt;/code&gt; 형태로 주입했었다면 이제는 그 대신에 &lt;code&gt;Illuminate\Contracts\Cache\Repository&lt;/code&gt;를 주입하도록 합니다. &lt;/p&gt;

&lt;h3 id=&quot;페이지네이션&quot;&gt;페이지네이션&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$paginator-&amp;gt;links()&lt;/code&gt; 로 호출되던 부분을 &lt;code&gt;$paginator-&amp;gt;render()&lt;/code&gt;으로 교체하십시오.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$paginator-&amp;gt;getFrom()&lt;/code&gt; 와 &lt;code&gt;$paginator-&amp;gt;getTo()&lt;/code&gt;로 호출되던 부분을 각각 &lt;code&gt;$paginator-&amp;gt;firstItem()&lt;/code&gt; 와 &lt;code&gt;$paginator-&amp;gt;lastItem()&lt;/code&gt; 로 교체합니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;$paginator-&amp;gt;getPerPage()&lt;/code&gt;, &lt;code&gt;$paginator-&amp;gt;getCurrentPage()&lt;/code&gt;, &lt;code&gt;$paginator-&amp;gt;getLastPage()&lt;/code&gt; 그리고 &lt;code&gt;$paginator-&amp;gt;getTotal()&lt;/code&gt;메소드 앞에 접두어로 붙던 “get”을 제거 하십시오(예. &lt;code&gt;$paginator-&amp;gt;perPage()&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&quot;beanstalk-큐&quot;&gt;Beanstalk 큐&lt;/h3&gt;

&lt;p&gt;라라벨 5.0에서는 &lt;code&gt;&amp;quot;pda/pheanstalk&amp;quot;: &amp;quot;~2.1&amp;quot;&lt;/code&gt; 대신에 &lt;code&gt;&amp;quot;pda/pheanstalk&amp;quot;: &amp;quot;~3.0”&lt;/code&gt;을 필요로 합니다. &lt;/p&gt;

&lt;h3 id=&quot;remote&quot;&gt;Remote&lt;/h3&gt;

&lt;p&gt;Remote 컴포넌트는 더이상 제공하지 않습니다. &lt;/p&gt;

&lt;h3 id=&quot;workbench&quot;&gt;Workbench&lt;/h3&gt;

&lt;p&gt;Workbench 컴포넌트는 더이상 제공하지 않습니다. &lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;upgrade-4.2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;4.1에서-4.2로-업그레이드-하기&quot;&gt;4.1에서 4.2로 업그레이드 하기&lt;/h2&gt;

&lt;h3 id=&quot;php-5.4-이상&quot;&gt;PHP 5.4 이상&lt;/h3&gt;

&lt;p&gt;라라벨 4.2는 PHP 5.4.0 이상을 필요로 합니다. &lt;/p&gt;

&lt;h3 id=&quot;기본-암호화-방식&quot;&gt;기본 암호화 방식&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;app/config/app.php&lt;/code&gt; 설정 파일에 새로운 &lt;code&gt;chpher&lt;/code&gt; 옵션을 추가하십시오. 이 옵션값은 &lt;code&gt;MCRYPT_RIJNDAEL_256&lt;/code&gt;가 되어야 합니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;cipher&amp;#39; =&amp;gt; MCRYPT_RIJNDAEL_256
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 설정은 라라벨의 암호화 기능에 의해 사용되는 기본 암호화를 제어하는​​ 데 사용됩니다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;참고:&lt;/strong&gt; 라라벨 4.2에서는 기본 암호화 옵션은 가장 안전한 암호화 방식으로 알려진 &lt;code&gt;MCRYPT_RIJNDAEL_128&lt;/code&gt; (AES)입니다.  암호화 방식을 &lt;code&gt;MCRYPT_RIJNDAEL_256&lt;/code&gt;으로 되돌릴 필요가 있는 경우는 라라벨 4.1 이전 버전에서 암호화 된 쿠키 / 값을 해독해야 하는 경우입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;soft-삭제-모델은-traits를-사용합니다.&quot;&gt;Soft 삭제 모델은 Traits를 사용합니다.&lt;/h3&gt;

&lt;p&gt;만약 모델의 soft 삭제를 사용하였었따면 &lt;code&gt;softDeletes&lt;/code&gt; 속성은 제거되었습니다. 이제 다음처럼 &lt;code&gt;SoftDeletingTrait&lt;/code&gt;을 사용해야 합니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;use Illuminate\Database\Eloquent\SoftDeletingTrait;

class User extends Eloquent {
    use SoftDeletingTrait;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또한 수동으로 &lt;code&gt;deleted_at&lt;/code&gt; 컬럼을  &lt;code&gt;dates&lt;/code&gt; 속성에 추가해주어야 합니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class User extends Eloquent {
    use SoftDeletingTrait;

    protected $dates = [&amp;#39;deleted_at&amp;#39;];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;모든 soft 삭제 작업을 위한 API는 동일합니다. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;주의:&lt;/strong&gt; &lt;code&gt;SoftDeletingTrait&lt;/code&gt; 는 기본 모델에 사용해서는 안됩니다. 실제 모델 클래스에서만 사용하도록 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;뷰-/-페이지네이션-environment-이름-변경&quot;&gt;뷰 / 페이지네이션 Environment 이름 변경&lt;/h3&gt;

&lt;p&gt;코드상에서 &lt;code&gt;Illuminate\View\Environment&lt;/code&gt; 클래스 또는 &lt;code&gt;Illuminate\Pagination\Environment&lt;/code&gt; 클래스를 참조하도록 되어 있었다면 그 대신에 &lt;code&gt;Illuminate\View\Factory&lt;/code&gt; 와 &lt;code&gt;Illuminate\Pagination\Factory&lt;/code&gt;를 참조하도록 변경합니다. 이 두개의 클래스는 기능을 보다 잘 나타내기 위해서 이름이 변경되었습니다. &lt;/p&gt;

&lt;h3 id=&quot;페이지네이션-프리젠터에-파라미터-추가&quot;&gt;페이지네이션 프리젠터에 파라미터 추가&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Illuminate\Pagination\Presenter&lt;/code&gt;클래스를 확장하는 경우 &lt;code&gt;getPageLinkWrapper&lt;/code&gt; 추상 메소드에 &lt;code&gt;rel&lt;/code&gt; 인자가 추가되도록 변경되었습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;abstract public function getPageLinkWrapper($url, $page, $rel = null);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;iron.io-큐-암호화&quot;&gt;Iron.Io 큐 암호화&lt;/h3&gt;

&lt;p&gt;Iron.io 큐 드라이버를 사용하는 경우 큐 설정 파일에서 새롭게 &lt;code&gt;encrypt&lt;/code&gt; 옵션을 추가합니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;encrypt&amp;#39; =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;upgrade-4.1.29&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;4.1.x-이하에서-4.1.29로-업그레이드-하기&quot;&gt;4.1.X 이하에서 4.1.29로 업그레이드 하기&lt;/h2&gt;

&lt;p&gt;라라벨 4.1.29에서는 모든 데이터베이스 드라이버에 대한 컬럼 인용 부분이 향상되었습니다. 모델에서 &lt;code&gt;fillable&lt;/code&gt; 속성을 사용하지 않은 경우 여러가지 컬럼의 대량 할당에 관한(msass assignment) 취약점으로 부터 어플리케이션을 보호할 수 있습니다. 모델에서 &lt;code&gt;fillable&lt;/code&gt; 속성을 사용하여 데이터를 할당하는 경우 어플리케이션이 보다 안전해 집니다. 그러나 여러분이 &lt;code&gt;guarded&lt;/code&gt; 속성을 사용하고 있고 사용자로 부터 전달된 배열을 “update” 나 “save” 유형의 기능에 전달하는 경우라면 어플리케이션이 mass assignment 위험에 노출되어 있으므로 즉시 4.1.29로 업그레이드 해야 합니다. &lt;/p&gt;

&lt;p&gt;라라벨4.1.29로 업그레이드 하기 위해서는 &lt;code&gt;composer update&lt;/code&gt; 를 실행하면 됩니다. 이 업데이트에서는 소스 수정이 필요한 사항들은 포함되어 있지 않습니다. &lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;upgrade-4.1.26&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;4.1.25-이하에서-4.1.26으로-업그레이드-하기&quot;&gt;4.1.25 이하에서 4.1.26으로 업그레이드 하기&lt;/h2&gt;

&lt;p&gt;라라벨 4.1.26에서는 “remember me” 쿠키와 관련된 보안이 강화되었습니다. 이 업데이트 이전에는 remember 쿠키가 악의적인 사용자에 의해서 탈취되어 사용자 계정의 암호를 재설정하거나, 로그아웃 해도 장기간 사용이 가능한 상태로 남아 있었습니다. &lt;/p&gt;

&lt;p&gt;이번 변경사항에서는 &lt;code&gt;users&lt;/code&gt; 테이블(또는 사용자 관리랄 위한 테이블)에 새로운 &lt;code&gt;remember_token&lt;/code&gt; 컬럼을 추가해야 합니다. 이 변경으로 인해서 사용자가 어플리케이션에 로그인 할 때마다 새로운 토큰이 할당됩니다. 이 토큰은 사용자가 어플리케이션에서 로그아웃 할때마다 다시 생성됩니다. 이 구현은 만약 “remember me” 쿠키가 탈취 당하더라도 어플리케이션에서 로그아웃 하면 해당 쿠키는 사용할 수 없게 된다는 것을 의미합니다. &lt;/p&gt;

&lt;h3 id=&quot;업그레이드-방법&quot;&gt;업그레이드 방법&lt;/h3&gt;

&lt;p&gt;먼저 &lt;code&gt;users&lt;/code&gt; 테이블에 null을 허용하는 VARCHAR(100) 또는 TEXT 형식의 &lt;code&gt;remember_token&lt;/code&gt; 컬럼을 추가합니다. &lt;/p&gt;

&lt;p&gt;다음으로 Eloquent 인증 드라이버를 사용하고 있는 경우에, User 클래스에 다음 세 메소드를 추가하십시오.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public function getRememberToken()
{
    return $this-&amp;gt;remember_token;
}

public function setRememberToken($value)
{
    $this-&amp;gt;remember_token = $value;
}

public function getRememberTokenName()
{
    return &amp;#39;remember_token&amp;#39;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;주의:&lt;/strong&gt; 이 변경으로 인해 현재 사용중인 &amp;quot;Remember me&amp;quot; 세션이 무효화되기 때문에 모든 사용자는 어플리케이션에 접속할 때 강제로 다시 인증을 해야되게 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;패키지-개발자에게.&quot;&gt;패키지 개발자에게.&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Illuminate\Auth\UserProviderInterface&lt;/code&gt; 인터페이스에 새로운 2개의 메소드가 추가되었습니다. 기본 드라이버에 간단한 구현예제를 확인하실 수 있습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public function retrieveByToken($identifier, $token);

public function updateRememberToken(UserInterface $user, $token);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Illuminate\Auth\UserInterface&lt;/code&gt;에서도 “업데이트 방법”에서 설명하고 있는 새로운 메소드 3개가 추가되었습니다. &lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;upgrade-4.1&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;4.0에서-4.1로-업그레이드&quot;&gt;4.0에서 4.1로 업그레이드&lt;/h2&gt;

&lt;h3 id=&quot;컴포저-의존성-업그레이드-하기&quot;&gt;컴포저 의존성 업그레이드 하기&lt;/h3&gt;

&lt;p&gt;라라벨 어플리케이션을 4.1로 업그레이드 하기 위해서는 &lt;code&gt;composer.json&lt;/code&gt; 파일에서 &lt;code&gt;laravel/framework&lt;/code&gt;의 버전을 &lt;code&gt;4.1.*&lt;/code&gt;으로 변경해야 합니다. &lt;/p&gt;

&lt;h3 id=&quot;파일-교체&quot;&gt;파일 교체&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;public/index.php&lt;/code&gt; 파일을 &lt;a href=&quot;https://github.com/laravel/laravel/blob/v4.1.0/public/index.php&quot;&gt;저장소의 새로운 버전&lt;/a&gt;으로 교체 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;artisan&lt;/code&gt; 파일을 &lt;a href=&quot;https://github.com/laravel/laravel/blob/v4.1.0/artisan&quot;&gt;저장소의 새로운 버전&lt;/a&gt;으로 교체 합니다.&lt;/p&gt;

&lt;h3 id=&quot;설정-파일과-옵션-추가&quot;&gt;설정 파일과 옵션 추가&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;app/config/app.php&lt;/code&gt; 설정 파일에서 &lt;code&gt;aliases&lt;/code&gt; 와 &lt;code&gt;providers&lt;/code&gt; 배열을 업데이트 합니다. 배열에서 업데이트 해야될 값은 &lt;a href=&quot;https://github.com/laravel/laravel/blob/v4.1.0/app/config/app.php&quot;&gt;이 파일&lt;/a&gt;에서 확인할 수 있습니다. 사용자가 별도로 지정한 패키지 서비스 프로바이더와 별칭을 따로 추가하는 것을 잊지 마십시오. &lt;/p&gt;

&lt;p&gt;새로운 &lt;code&gt;app/config/remote.php&lt;/code&gt; 설정 파일을 &lt;a href=&quot;https://github.com/laravel/laravel/blob/v4.1.0/app/config/remote.php&quot;&gt;저장소&lt;/a&gt;로 부터 추가합니다. &lt;/p&gt;

&lt;p&gt;새로운 &lt;code&gt;app/config/session.php&lt;/code&gt; 파일에서 새로운 &lt;code&gt;expire_on_close&lt;/code&gt; 설정 옵션을 추가합니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/config/queue.php&lt;/code&gt; 파일에서 새로운 &lt;code&gt;failed&lt;/code&gt; 설정 섹션을 추가합니다. 이 섹션의 기본값은 다음과 같습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;failed&amp;#39; =&amp;gt; [
    &amp;#39;database&amp;#39; =&amp;gt; &amp;#39;mysql&amp;#39;, &amp;#39;table&amp;#39; =&amp;gt; &amp;#39;failed_jobs&amp;#39;,
],
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;(선택사항)&lt;/strong&gt; &lt;code&gt;app/config/view.php&lt;/code&gt; 파일에서 &lt;code&gt;pagination&lt;/code&gt; 설정 옵션을 &lt;code&gt;pagination::slider-3&lt;/code&gt; 으로 업데이트 합니다. &lt;/p&gt;

&lt;h3 id=&quot;컨트롤러-업데이트&quot;&gt;컨트롤러 업데이트&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;app/controllers/BaseController.php&lt;/code&gt; 파일의 최 상단 부분에 &lt;code&gt;use&lt;/code&gt; 가 사용되었다면 &lt;code&gt;use Illuminate\Routing\Controllers\Controller;&lt;/code&gt; 를 &lt;code&gt;use Illuminate\Routing\Controller;&lt;/code&gt;으로 변경합니다. &lt;/p&gt;

&lt;h3 id=&quot;패스워드-리마인더(알리미)-업데이트&quot;&gt;패스워드 리마인더(알리미) 업데이트&lt;/h3&gt;

&lt;p&gt;패스워드 리마인더는 유연성을 높이기 위해서 많은 변경이 있었습니다. &lt;code&gt;php artisan auth:reminders-controller&lt;/code&gt; 아티즌 명령어를 실행하여 작성되는 새로운 컨트롤러를 살펴보십시오. 혹은 &lt;a href=&quot;/docs/security#password-reminders-and-reset&quot;&gt;변경 관련 문서&lt;/a&gt;를 확인하고 그에 따라 어플리케이션을 업데이트 하십시오. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/lang/en/reminders.php&lt;/code&gt; 언어 파일을 &lt;a href=&quot;https://github.com/laravel/laravel/blob/v4.1.0/app/lang/en/reminders.php&quot;&gt;새로운 파일&lt;/a&gt;에 맞게 변경하십시오. &lt;/p&gt;

&lt;h3 id=&quot;구동환경-감지-업데이트&quot;&gt;구동환경 감지 업데이트&lt;/h3&gt;

&lt;p&gt;보안의 이유로 어플리케이션의 구동 환경을 감지 하기 위해서 URL 도메인은 더 이상 사용되지 않습니다. 이 값은 손쉽게 요청시에 변경이 가능하여 공력을 가능하게 합니다. 머신의 호스트 네임 (맥, 리눅스, 윈도우 에서 &lt;code&gt;hostname&lt;/code&gt; 명령어를 사용하십시오) 을 사용하도록 구동 환경 감지 로직을 변경해야 합니다. &lt;/p&gt;

&lt;h3 id=&quot;로그-파일-간략화.&quot;&gt;로그 파일 간략화.&lt;/h3&gt;

&lt;p&gt;라라벨은 이제 &lt;code&gt;app/storage/logs/laravel.log&lt;/code&gt; 라는 하나의 파일만을 생성합니다. 그러나 이 동작은 &lt;code&gt;app/start/global.php&lt;/code&gt; 파일에서 설정이 가능합니다. &lt;/p&gt;

&lt;h3 id=&quot;trailing-slash-리다이렉션-제거&quot;&gt;Trailing Slash 리다이렉션 제거&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;bootstrap/start.php&lt;/code&gt; 파일안에서 &lt;code&gt;$app-&amp;gt;redirectIfTrailingSlash()&lt;/code&gt; 호출을 제거 하십시오. 이 기능은 프레임워크에 포함되어 있는 &lt;code&gt;.htaccess&lt;/code&gt; 파일에서 처리되어 더이상 메소드가 필요하지 않습니다. &lt;/p&gt;

&lt;p&gt;다음으로 &lt;code&gt;public/.htaccess&lt;/code&gt; 파일을 &lt;a href=&quot;https://github.com/laravel/laravel/blob/v4.1.0/public/.htaccess&quot;&gt;새버전의 파일&lt;/a&gt; 으로 교체합니다.&lt;/p&gt;

&lt;h3 id=&quot;현재-라우트-엑세스하기&quot;&gt;현재 라우트 엑세스하기&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Route::getCurrentRoute()&lt;/code&gt; 대신에 &lt;code&gt;Route::current()&lt;/code&gt;를 통해서 현재 라우트에 엑세스 할 수 있습니다.  &lt;/p&gt;

&lt;h3 id=&quot;컴포저-업데이트&quot;&gt;컴포저 업데이트&lt;/h3&gt;

&lt;p&gt;변경사항 적용을 완료하면 &lt;code&gt;composer update&lt;/code&gt; 를 실행하여 어플리케이션 코어 파일을 업데이트 할 수 있습니다. 로딩과 관련된 에러가 발생한다면 다음처럼 &lt;code&gt;--no-scripts&lt;/code&gt; 옵션과 함께 &lt;code&gt;update&lt;/code&gt; 명령어를 실행하십시오 &lt;code&gt;composer update --no-scripts&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;와일드카드-이벤트-리스너&quot;&gt;와일드카드 이벤트 리스너&lt;/h3&gt;

&lt;p&gt;와일드 카드 이벤트 리스너는 더이상 핸들러 함수의 인자에 이벤트를 전달하지 않습니다.  발행된 이벤트를 확인해야 할 필요가 다면, &lt;code&gt;Event::firing()&lt;/code&gt; 를 사용하십시오.&lt;/p&gt;
</description>
        <pubDate>Sat, 09 May 2015 00:00:00 +0900</pubDate>
        <link>http://www.xpressengine.com/docs/5.0/upgrade</link>
        <guid isPermaLink="true">http://www.xpressengine.com/docs/5.0/upgrade</guid>
        
        
        <category>5.0</category>
        
      </item>
    
      <item>
        <title>테스팅(Testing)</title>
        <description>&lt;h1 id=&quot;테스팅(testing)&quot;&gt;테스팅(Testing)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;소개&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#defining-and-running-tests&quot;&gt;테스팅 정의와 실행하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#test-environment&quot;&gt;테스트 환경&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#calling-routes-from-tests&quot;&gt;테스트에서 라우트 호출하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mocking-facades&quot;&gt;파사드 Mocking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#framework-assertions&quot;&gt;프레임워크 Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#helper-methods&quot;&gt;헬퍼 메소드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#refreshing-the-application&quot;&gt;어플리케이션 새로 고침&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;소개&quot;&gt;소개&lt;/h2&gt;

&lt;p&gt;라라벨은 단위 테스트를 고려하여 구성되어 있습니다. 실제로는 PHPUnit을 통한 테스팅이 별다른 설정 없이도 지원되며 어플리케이션을 위한 &lt;code&gt;phpunit.xml&lt;/code&gt; 파일이  이미 설정되어 있습니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;tests&lt;/code&gt; 디렉토리에는 테스트 예제 파일이 제공되어 있습니다. 새롭게 라라벨 어플리케이션을 설치한 후 커맨드 라인에서 그대로 &lt;code&gt;phpunit&lt;/code&gt; 명령어를 실행하면 테스트를 수행할 수 있습니다. &lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;defining-and-running-tests&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;테스트-정의-&amp;amp;-실행하기&quot;&gt;테스트 정의 &amp;amp; 실행하기&lt;/h2&gt;

&lt;p&gt;테스트 케이스를 만들기 위해서는 &lt;code&gt;tests&lt;/code&gt; 디렉토리에 새로운 테스트 파일을 작성하면 됩니다. 테스트 클래스는 &lt;code&gt;TestCase&lt;/code&gt; 클래스를 상속받아야 합니다. 여러분은 PHPUnit을 사용할 때와 마찬가지로 테스트 메소드를 정의 하면 됩니다. &lt;/p&gt;

&lt;h4 id=&quot;테스트-클래스의-예제&quot;&gt;테스트 클래스의 예제&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class FooTest extends TestCase {

    public function testSomethingIsTrue()
    {
        $this-&amp;gt;assertTrue(true);
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;터미널에서 &lt;code&gt;phpunit&lt;/code&gt; 명령어를 실행함으로써 어플리케이션의 모든 테스트를 실행할 수 있습니다. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;참고&lt;/strong&gt; 여러분이 &lt;code&gt;setUp&lt;/code&gt; 메소드를 정의했다면 &lt;code&gt;parent::setUp&lt;/code&gt; 을 호출하는 것을 확인하십시오. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;test-environment&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;테스트-환경&quot;&gt;테스트 환경&lt;/h2&gt;

&lt;p&gt;단위 테스트를 실행할 때 라라벨은 자동으로 설정 환경을 &lt;code&gt;testing&lt;/code&gt;에 구성해 놓습니다. 또한 라라벨은 테스트 환경에서의 &lt;code&gt;session&lt;/code&gt; 과 &lt;code&gt;cache&lt;/code&gt;을 위한 설정 파일들을 포함하고 있습니다. 이 두개의 드라이버는 테스트 환경에서 &lt;code&gt;array&lt;/code&gt; 로 설정되며 세션 또는 캐시 데이터는 테스팅이 진행되는 동안에만 존재한다는 것을 의미합니다. 여러분은 필요한 경우에 자유롭게 테스트 환경 설정을 만들 수 있습니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;testing&lt;/code&gt; 환경 변수는 &lt;code&gt;phpunit.xml&lt;/code&gt; 파일에 설정되어 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;calling-routes-from-tests&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;테스트에서-라우트-호출하기&quot;&gt;테스트에서 라우트 호출하기&lt;/h2&gt;

&lt;h4 id=&quot;테스트에서-라우트-호출하기&quot;&gt;테스트에서 라우트 호출하기&lt;/h4&gt;

&lt;p&gt;여러분은 테스트에서 &lt;code&gt;call&lt;/code&gt; 메소르들 사용하여 손쉽게 라우트를 호출할 수 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$response = $this-&amp;gt;call(&amp;#39;GET&amp;#39;, &amp;#39;user/profile&amp;#39;);

$response = $this-&amp;gt;call($method, $uri, $parameters, $cookies, $files, $server, $content);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 &lt;code&gt;Illuminate\Http\Response&lt;/code&gt; 객체를 확인하면 됩니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$this-&amp;gt;assertEquals(&amp;#39;Hello World&amp;#39;, $response-&amp;gt;getContent());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;테스트에서-컨트롤러-호출하기&quot;&gt;테스트에서 컨트롤러 호출하기&lt;/h4&gt;

&lt;p&gt;또한 테스트에서 컨트롤러를 호출할 수도 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$response = $this-&amp;gt;action(&amp;#39;GET&amp;#39;, &amp;#39;HomeController@index&amp;#39;);

$response = $this-&amp;gt;action(&amp;#39;GET&amp;#39;, &amp;#39;UserController@profile&amp;#39;, [&amp;#39;user&amp;#39; =&amp;gt; 1]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;주의&lt;/strong&gt; &lt;code&gt;action&lt;/code&gt; 메소드를 사용할 경우에 여러분은 컨트롤러의 전체 네임스페이스를 지정할 필요가 없습니다. &lt;code&gt;App\Http\Controllers&lt;/code&gt; 네임 스페이스에 뒤에 붙게 되는 클래스 이름만 지정하면 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;getContent&lt;/code&gt; 메소드는 응답을 통해 얻어지는 문자열을 반환합니다. 여러분의 라우트가 &lt;code&gt;View&lt;/code&gt;를 반환하는 경우 &lt;code&gt;original&lt;/code&gt; 속성을 사용하여 뷰에 액세스 할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$view = $response-&amp;gt;original;

$this-&amp;gt;assertEquals(&amp;#39;John&amp;#39;, $view[&amp;#39;name&amp;#39;]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HTTPS 라우트를 호출하기 위해서는 &lt;code&gt;callSecure&lt;/code&gt; 메소드를 사용하면 됩니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$response = $this-&amp;gt;callSecure(&amp;#39;GET&amp;#39;, &amp;#39;foo/bar&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;mocking-facades&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;파사드-mocking&quot;&gt;파사드 Mocking&lt;/h2&gt;

&lt;p&gt;테스트를 진행할 때 여러분은 종종 라라벨의 static 파사드를 Mock 하기를 원할 수도 있습니다. 예를 들어 다음의 컨트롤러 액션의 경우를 생각해 보겠습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public function getIndex()
{
    Event::fire(&amp;#39;foo&amp;#39;, [&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Dayle&amp;#39;]);

    return &amp;#39;All done!&amp;#39;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파사드에 &lt;code&gt;shouldReceive&lt;/code&gt; 메소드를 사용하여 &lt;code&gt;Event&lt;/code&gt; 클래스의 호출을 Mock 할 수 있으며 이것은 &lt;a href=&quot;https://github.com/padraic/mockery&quot;&gt;Mockery&lt;/a&gt; mock 인스턴스를 반환할 것입니다. &lt;/p&gt;

&lt;h4 id=&quot;파사드-mocking&quot;&gt;파사드 Mocking&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public function testGetIndex()
{
    Event::shouldReceive(&amp;#39;fire&amp;#39;)-&amp;gt;once()-&amp;gt;with(&amp;#39;foo&amp;#39;, [&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Dayle&amp;#39;]);

    $this-&amp;gt;call(&amp;#39;GET&amp;#39;, &amp;#39;/&amp;#39;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;주의&lt;/strong&gt; &lt;code&gt;Request&lt;/code&gt; 파사드를 mock 해서는 안됩니다. 대신에 테스트를 수행할 때 &lt;code&gt;call&lt;/code&gt; 메소드에 원하는 입력을 전달하십시오. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;framework-assertions&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;프레임워크-assertions&quot;&gt;프레임워크 Assertions&lt;/h2&gt;

&lt;p&gt;라라벨은 테스트를 돕기 위해서 몇 가지 &lt;code&gt;assert&lt;/code&gt; 메소드가 준비되어 있습니다:&lt;/p&gt;

&lt;h4 id=&quot;응답이-제대로-이루어졌는지-assert&quot;&gt;응답이 제대로 이루어졌는지 assert&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public function testMethod()
{
    $this-&amp;gt;call(&amp;#39;GET&amp;#39;, &amp;#39;/&amp;#39;);

    $this-&amp;gt;assertResponseOk();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;응답-코드-assert&quot;&gt;응답 코드 assert&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$this-&amp;gt;assertResponseStatus(403);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;응답이-리다이렉션인지-assert&quot;&gt;응답이 리다이렉션인지 assert&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$this-&amp;gt;assertRedirectedTo(&amp;#39;foo&amp;#39;);

$this-&amp;gt;assertRedirectedToRoute(&amp;#39;route.name&amp;#39;);

$this-&amp;gt;assertRedirectedToAction(&amp;#39;Controller@method&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;뷰가-가지는-데이터에-대한-assert&quot;&gt;뷰가 가지는 데이터에 대한 assert&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public function testMethod()
{
    $this-&amp;gt;call(&amp;#39;GET&amp;#39;, &amp;#39;/&amp;#39;);

    $this-&amp;gt;assertViewHas(&amp;#39;name&amp;#39;);
    $this-&amp;gt;assertViewHas(&amp;#39;age&amp;#39;, $value);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;세션이-가지는-데이터에-대한-assert&quot;&gt;세션이 가지는 데이터에 대한 assert&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public function testMethod()
{
    $this-&amp;gt;call(&amp;#39;GET&amp;#39;, &amp;#39;/&amp;#39;);

    $this-&amp;gt;assertSessionHas(&amp;#39;name&amp;#39;);
    $this-&amp;gt;assertSessionHas(&amp;#39;age&amp;#39;, $value);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;세션이-에러를-가지는지-assert&quot;&gt;세션이 에러를 가지는지 assert&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public function testMethod()
{
    $this-&amp;gt;call(&amp;#39;GET&amp;#39;, &amp;#39;/&amp;#39;);

    $this-&amp;gt;assertSessionHasErrors();

    // Asserting the session has errors for a given key...
    $this-&amp;gt;assertSessionHasErrors(&amp;#39;name&amp;#39;);

    // Asserting the session has errors for several keys...
    $this-&amp;gt;assertSessionHasErrors([&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;지난-입력값에-대한-assert&quot;&gt;지난 입력값에 대한 assert&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public function testMethod()
{
    $this-&amp;gt;call(&amp;#39;GET&amp;#39;, &amp;#39;/&amp;#39;);

    $this-&amp;gt;assertHasOldInput();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;helper-methods&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;헬퍼-메소드&quot;&gt;헬퍼 메소드&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TestCase&lt;/code&gt; 클래스는 어플리케이션의 테스팅을 돕기 위한 몇가지의 헬퍼 메소드를 포함하고 있습니다. &lt;/p&gt;

&lt;h4 id=&quot;테스트에서-세션을-설정하고-비우기&quot;&gt;테스트에서 세션을 설정하고 비우기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$this-&amp;gt;session([&amp;#39;foo&amp;#39; =&amp;gt; &amp;#39;bar&amp;#39;]);

$this-&amp;gt;flushSession();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;현재의-인증된-사용자를-설정하기&quot;&gt;현재의 인증된 사용자를 설정하기&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;be&lt;/code&gt;  메소드를 사용하여 현재 인증된 사용자를 설정할 수 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$user = new User([&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;John&amp;#39;]);

$this-&amp;gt;be($user);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;테스트에서 데이터베이스의 내용을 재구성하려면 &lt;code&gt;seed&lt;/code&gt; 메소드를 사용하면 됩니다:&lt;/p&gt;

&lt;h4 id=&quot;테스트에서-데이터베이스-초기-값-설정-다시-실행&quot;&gt;테스트에서 데이터베이스 초기 값 설정 다시 실행&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$this-&amp;gt;seed();

$this-&amp;gt;seed($connection);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;시드를 생성하는 데에 대한 보다 자세한 정보는 공식 문서의 &lt;a href=&quot;/docs/migrations#database-seeding&quot;&gt;마이그레이션 과 시딩&lt;/a&gt; 섹션을 참고하십시오. &lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;refreshing-the-application&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;어플리케이션-새로-고침&quot;&gt;어플리케이션 새로 고침&lt;/h2&gt;

&lt;p&gt;이미 알고 있다 시피 여러분은 테스트 메소드에서 &lt;code&gt;$this-&amp;gt;app&lt;/code&gt; 을 통해서 어플리케이션(&lt;a href=&quot;/docs/5.0/container&quot;&gt;서비스 컨테이너&lt;/a&gt;)에 엑세스 할 수 있습니다. 이 서비스 컨테이너 인스턴스는 각각의 테스트 클래스 마다 새로 고침됩니다. 만약 여러분이 수동으로 어플리케이션을 새로고침 하고 싶은 경우에는 테스트 메소드에서 &lt;code&gt;refreshApplication&lt;/code&gt; 메소드를 사용하면 됩니다. 이렇게 하면 테스트 케이스가 실행을 시작한 이후 IoC 컨테이너에 등록된 mock 객체와 추가적인 바인딩을 재설정 할것입니다. &lt;/p&gt;
</description>
        <pubDate>Sat, 09 May 2015 00:00:00 +0900</pubDate>
        <link>http://www.xpressengine.com/docs/5.0/testing</link>
        <guid isPermaLink="true">http://www.xpressengine.com/docs/5.0/testing</guid>
        
        
        <category>5.0</category>
        
      </item>
    
      <item>
        <title>템플릿(Templates)</title>
        <description>&lt;h1 id=&quot;템플릿(templates)&quot;&gt;템플릿(Templates)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#blade-templating&quot;&gt;블레이드 템플릿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#other-blade-control-structures&quot;&gt;기타 블레이드 컨트롤 구조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;blade-templating&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;블레이드-템플릿&quot;&gt;블레이드 템플릿&lt;/h2&gt;

&lt;p&gt;블레이드는 라라벨에서 제공하는 간단하지만 강력한 템플릿 엔진입니다. 컨트롤러 레이아웃과는 다르게 블레이드는 &lt;em&gt;템플릿 상속&lt;/em&gt;과 &lt;em&gt;섹션&lt;/em&gt;을 통해서 처리됩니다. 모든 블레이드 템플릿 파일은 &lt;code&gt;.blade.php&lt;/code&gt; 확장자를 가져야 합니다. &lt;/p&gt;

&lt;h4 id=&quot;블레이드-레이아웃-정의하기&quot;&gt;블레이드 레이아웃 정의하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;!-- Stored in resources/views/layouts/master.blade.php --&amp;gt;

&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;App Name - @yield(&amp;#39;title&amp;#39;)&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        @section(&amp;#39;sidebar&amp;#39;)
            This is the master sidebar.
        @show

        &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
            @yield(&amp;#39;content&amp;#39;)
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;블레이드-레이아웃-사용하기&quot;&gt;블레이드 레이아웃 사용하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@extends(&amp;#39;layouts.master&amp;#39;)

@section(&amp;#39;title&amp;#39;, &amp;#39;Page Title&amp;#39;)

@section(&amp;#39;sidebar&amp;#39;)
    @@parent

    &amp;lt;p&amp;gt;This is appended to the master sidebar.&amp;lt;/p&amp;gt;
@stop

@section(&amp;#39;content&amp;#39;)
    &amp;lt;p&amp;gt;This is my body content.&amp;lt;/p&amp;gt;
@stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;블레이드 레이아웃을 &lt;code&gt;extend&lt;/code&gt;하면 레이아웃의 섹션영역을 재지정하게 됩니다. 자식 뷰에서 부모의 콘텐츠를 포함하려면 &lt;code&gt;@@ parent&lt;/code&gt; 지시문을 섹션에서 사용하면 됩니다. 주로 사이드 바 또는 하단 글 레이아웃에 내용을 추가 할 때 유용합니다.&lt;/p&gt;

&lt;p&gt;때로는 섹션을 정의해야할지 정확하게 판단하지 못할 수도 있는데, 이 경우에는 기본값을 &lt;code&gt;@yield&lt;/code&gt;에 직접 지정할 수도 있습니다. 다음과 같이 두 번째 인자에 기본값을 지정하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@yield(&amp;#39;section&amp;#39;, &amp;#39;Default Content&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;other-blade-control-structures&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;기타-블레이드-컨트롤-구조&quot;&gt;기타 블레이드 컨트롤 구조&lt;/h2&gt;

&lt;h4 id=&quot;데이타-출력하기&quot;&gt;데이타 출력하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Hello, .

The current UNIX timestamp is .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;데이터가-존재하는지-확인후에-출력하기&quot;&gt;데이터가 존재하는지 확인후에 출력하기&lt;/h4&gt;

&lt;p&gt;때로는 변수를 출력하고자 할 때 해당 변수가 존재하는지 정확하게 알지 못할 때가 있습니다. 이런경우 여러분은 아마 다음처럼 하기를 원할 것입니다:&lt;/p&gt;

&lt;p&gt;하지만 삼항연산자를 작성하는 대신 블레이드에서는 짧게 축약해서 표현할 수 있습니다:&lt;/p&gt;

&lt;h4 id=&quot;중괄호를-그대로-표시하기&quot;&gt;중괄호를 그대로 표시하기&lt;/h4&gt;

&lt;p&gt;중괄호로 둘러싸인 문자열을 그대로 출력 할 필요가 있는 경우에는 &lt;code&gt;@&lt;/code&gt; 를 앞에 붙이는 것으로, Blade의 처리를 무시 할 수 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;데이터 escape 처리를 하지 않으려면 다음과 같이 작성하면됩니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Hello, {!! $name !!}.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;** 주의:** 어플리케이션의 사용자로부터 입력 된 내용을 표시 할 때에는 escape에 대한 주의가 필요합니다. 컨텐츠의 HTML 엔티티를 escape 하기위해 항상 이중 중괄호 표기법을 사용하십시오.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;조건문&quot;&gt;조건문&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@if (count($records) === 1)
    I have one record!
@elseif (count($records) &amp;gt; 1)
    I have multiple records!
@else
    I don&amp;#39;t have any records!
@endif

@unless (Auth::check())
    You are not signed in.
@endunless
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;반복&quot;&gt;반복&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@for ($i = 0; $i &amp;lt; 10; $i++)
    The current value is 
@endfor

@foreach ($users as $user)
    &amp;lt;p&amp;gt;This is user &amp;lt;/p&amp;gt;
@endforeach

@forelse($users as $user)
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
@empty
    &amp;lt;p&amp;gt;No users&amp;lt;/p&amp;gt;
@endforelse

@while (true)
    &amp;lt;p&amp;gt;I&amp;#39;m looping forever.&amp;lt;/p&amp;gt;
@endwhile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;하위-뷰-포함하기&quot;&gt;하위 뷰 포함하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@include(&amp;#39;view.name&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;포함하게될 하위 뷰에 데이터 배열을 전달할 수 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@include(&amp;#39;view.name&amp;#39;, [&amp;#39;some&amp;#39; =&amp;gt; &amp;#39;data&amp;#39;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;섹션-재정의하기&quot;&gt;섹션 재정의하기&lt;/h4&gt;

&lt;p&gt;섹션 전체를 다시 재정의하려면 &lt;code&gt;overwrite&lt;/code&gt; 문을 사용하십시오:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@extends(&amp;#39;list.item.container&amp;#39;)

@section(&amp;#39;list.item.content&amp;#39;)
    &amp;lt;p&amp;gt;This is an item of type &amp;lt;/p&amp;gt;
@overwrite
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;다국어에-대응-된-행-표시&quot;&gt;다국어에 대응 된 행 표시&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@lang(&amp;#39;language.line&amp;#39;)

@choice(&amp;#39;language.line&amp;#39;, 1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;주석&quot;&gt;주석&lt;/h4&gt;
</description>
        <pubDate>Sat, 09 May 2015 00:00:00 +0900</pubDate>
        <link>http://www.xpressengine.com/docs/5.0/templates</link>
        <guid isPermaLink="true">http://www.xpressengine.com/docs/5.0/templates</guid>
        
        
        <category>5.0</category>
        
      </item>
    
      <item>
        <title>어플리케이션 구조(Application Structure)</title>
        <description>&lt;h1 id=&quot;어플리케이션-구조(application-structure)&quot;&gt;어플리케이션 구조(Application Structure)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;소개&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-root-directory&quot;&gt;루트 디렉토리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-app-directory&quot;&gt;App 디렉토리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#namespacing-your-application&quot;&gt;어플리케이션에 네임스페이스 지정하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;소개&quot;&gt;소개&lt;/h2&gt;

&lt;p&gt;기본적인 라라벨 어플리케이션의 구조는 어플리케이션이 크건, 작건 좋은 시작점이 되는것을 의도하고 있습니다. 당연히 어플리케이션을 원하는대로 구성해도 됩니다. 컴포저가 클래스를 오토로딩할 수 있는 한 클래스를 어디에 위치시키는가에 대한 제약사항은 없습니다. &lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;the-root-directory&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;루트-디렉토리&quot;&gt;루트 디렉토리&lt;/h2&gt;

&lt;p&gt;새롭게 설치한 라라벨의 루트 디렉토리는 다양한 폴더를 가지고 있습니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;app&lt;/code&gt; 디렉토리는 예상하는바와 같이 어플리케이션의 핵심 코드들을 포함하고 있습니다. 더 자세한 내용은 뒤에서 살펴보겠습니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;bootstrap&lt;/code&gt; 폴더는 프레임워크가 부팅하고 오토로딩을 설정하는 몇몇 파일을 가지고 있습니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;config&lt;/code&gt; 디렉토리는 이름에서 알 수 있듯이 어플리케이션의 모든 설정파일을 가지고 있습니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;database&lt;/code&gt; 폴더는 데이터베이스의 마이그레이션과 시드 파일들을 가지고 있습니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;public&lt;/code&gt; 디렉토리는 프론트엔드를 관리하고 assets(image, javascript, CSS, 기타..) 파일들을 가지고 있습니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;resources&lt;/code&gt; 디렉토리는 뷰파일들과 raw assets(LESS, SASS, CoffeeScript) 그리고 “언어” 파일들을 가지고 있습니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;storage&lt;/code&gt; 디렉토리는 컴파일된 블레이드 템플릿, 파일 세션들, 파일 캐시들 그리고 프레임워크에서 생성한 파일들을 포함하고 있습니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;tests&lt;/code&gt; 디렉토리는 자동화된 테스트 파일을 가지고 있습니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;vendor&lt;/code&gt; 디렉토리는 컴포저의 의존성 폴더 입니다. &lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;the-app-directory&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;app-디렉토리&quot;&gt;App 디렉토리&lt;/h2&gt;

&lt;p&gt;어플리케이션의 가장 핵심적인 부분은 &lt;code&gt;app&lt;/code&gt; 디렉토리에 있습니다. 기본적으로 이 디렉토리의 네임스페이스는 컴포저가 &lt;a href=&quot;http://www.php-fig.org/psr/psr-4/&quot;&gt;PSR-4 autoloading standard&lt;/a&gt;방식으로 오토로딩될 수 있게 설정된 &lt;code&gt;App&lt;/code&gt; 으로 설정되어 있습니다. ** &lt;code&gt;app:name&lt;/code&gt; 아티즌 명령어를 통해서 네임스페이스를 변경할 수 있습니다**.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app&lt;/code&gt; 디렉토리는 &lt;code&gt;Console&lt;/code&gt;, &lt;code&gt;Http&lt;/code&gt; 그리고 &lt;code&gt;Providers&lt;/code&gt;와 같은 추가적인 디렉토리들을 가지고 있습니다. &lt;code&gt;Console&lt;/code&gt; 과 &lt;code&gt;Http&lt;/code&gt; 디렉토리는 어플리케이션의 &amp;quot;코어&amp;quot;에 API를 제공한다고 생각합니다. HTTP 프로토콜 과 CLI 모두 모두 어플리케이션과 상호 관계 메커니즘이지만, 실제 어플리케이션 로직은 포함하지 않습니다. 다시 말해 어플리케이션에 명령을 지시하는 두가지 방법이라는 것입니다. &lt;code&gt;Console&lt;/code&gt; 디렉토리는 모든 아티즌 명령어를 가지고 있으며 &lt;code&gt;Http&lt;/code&gt; 디렉토리는 컨트롤러, 필터, 그리고 requests-요청들을 가지고 있습니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Commands&lt;/code&gt; 디렉토리는 당연하게도, 응용 프로그램의 명령어들을 모아놓은 곳입니다. 각각의 명령어는 응용 프로그램이 큐에 삽입하는 작업을 나타내는 동시에 현재 요청에 대한 라이프 사이클 동안 수행 할 수있는 작업을 나타냅니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Events&lt;/code&gt; 디렉토리는 예상할 수 있듯이 이벤트 클래스를 모아놓은 곳입니다. 물론 이벤트를 표현하기 위해서 꼭 클래스를 사용할 필요는 없습니다. 그러나 새로운 이벤트를 사용하기 위해서, 아티즌 명령어를 통해서 생성 된 클래스는 기본적으로 이 디렉토리에 위치합니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Handlers&lt;/code&gt; 디렉토리는 커맨드와 이벤트들을 처리하는 클래스들을 포함하고 있습니다.  핸들러는 커맨드 또는 이벤트를 받아서 해당 명령 또는 발생한 이벤트에 따라 수행 로직을 실행합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Services&lt;/code&gt; 디렉토리는 어플리케이션에서 필요한 다양한 다양한 “헬퍼” 서비스들을 포함하고 있습니다. 예를 들어 라라벨에 포함된 &lt;code&gt;Registrar&lt;/code&gt; 서비스는  어플리케이션에 새로운 사용자의 생성과 검증하는 역활을 수행합니다. 다른 예로는 서비스가 외부 API들과 연결하거나, 다른 시스템 또는 어플리케이션에서 필요한 통계 데이터들을 수집하는 역활을 수행할 수 있습니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Exceptions&lt;/code&gt; 디렉토리는  어플리케이션의 예외 핸들러를 포함하고 있으며, 또한 응용프로그램에서 발생하는 예외들을 선언해 두기에 적당한 곳입니다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;참고:&lt;/strong&gt; &lt;code&gt;app&lt;/code&gt; 디렉토리 중에 많은 클래스들이 아티즌 명령어에 의해 생성되어 집니다. 사용 가능한 명령어들을 확인하려면 터미널에서 &lt;code&gt;php artisan list make&lt;/code&gt; 명령을 실행하십시오.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;namespacing-your-application&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;어플리케이션에-네임스페이스-지정하기&quot;&gt;어플리케이션에 네임스페이스 지정하기&lt;/h2&gt;

&lt;p&gt;앞서 이야기한대로 어플리케이션의 네임스페이스는 기본값으로 &lt;code&gt;App&lt;/code&gt;으로 지정되어 있습니다. 하지만 이 네임스페이스를 여러분이 고유한 값으로 변경하고자 한다면 &lt;code&gt;app:name&lt;/code&gt; 아티즌 명령어를 통해서 손쉽게 할 수 있습니다. 예를들어 어플리케이션이 “SocialNet”으로 이름을 지정하고자 한다면 다음과 같이 명령어를 실행하면 됩니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;php artisan app:name SocialNet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Sat, 09 May 2015 00:00:00 +0900</pubDate>
        <link>http://www.xpressengine.com/docs/5.0/structure</link>
        <guid isPermaLink="true">http://www.xpressengine.com/docs/5.0/structure</guid>
        
        
        <category>5.0</category>
        
      </item>
    
      <item>
        <title>세션(Session)</title>
        <description>&lt;h1 id=&quot;세션(session)&quot;&gt;세션(Session)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#configuration&quot;&gt;설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#session-usage&quot;&gt;세션 사용법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#flash-data&quot;&gt;임시 데이터&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#database-sessions&quot;&gt;데이터베이스 세션&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#session-drivers&quot;&gt;세션 드라이버&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;configuration&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;설정&quot;&gt;설정&lt;/h2&gt;

&lt;p&gt;HTTP 기반의 어플리케이션은 상태를 저장할수 없기 때문에, HTTP 요청들에 관계없이 사용자의 정보를 저장하기위해서 세션이 사용됩니다. 라라벨은 다양한 벡엔드 세션들에 관계없이 간결하고 통일된 API를 제공합니다. 많이 알려진  &lt;a href=&quot;http://memcached.org&quot;&gt;Memcached&lt;/a&gt;, &lt;a href=&quot;http://redis.io&quot;&gt;Redis&lt;/a&gt; 그리고 데이터베이스를 별다른 설정 없이 세션 시스템으로 사용할 수 있습니다. &lt;/p&gt;

&lt;p&gt;세션의 설정은 &lt;code&gt;config/session.php&lt;/code&gt; 파일에 있습니다. 이 파일에는 각각의 옵션에 대한 정리된 문서가 포함되어 있으므로 잘 확인하시기 바랍니다. 대부분의 어플리케이션에서 작동이 가능하도록 기본적으로 라라벨은 &lt;code&gt;file&lt;/code&gt; 세션 드라이버를 사용합니다. &lt;/p&gt;

&lt;p&gt;라라벨에서 Redis 세션을 사용하기 위해서는 컴포저를 통해서 &lt;code&gt;predis/predis  (~1.0)&lt;/code&gt; 패키지를 설치해야만 합니다. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;참고:&lt;/strong&gt; 세션을 암호화하여 저장하고자 한다면 &lt;code&gt;encrypt&lt;/code&gt; 설정 옵션을 &lt;code&gt;true&lt;/code&gt;로 지정하십시오. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;예약어&quot;&gt;예약어&lt;/h4&gt;

&lt;p&gt;라라벨 프레임워크는 내부적으로 &lt;code&gt;flash&lt;/code&gt;라는 세션키를 사용하고 있기 때문에 이 이름으로 세션을 추가하지 말아야 합니다. &lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;session-usage&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;세션-사용법&quot;&gt;세션 사용법&lt;/h2&gt;

&lt;p&gt;세션에 엑세스하기 위해서는 여러가지 방법이 있습니다. HTTP 요청-request의 &lt;code&gt;session&lt;/code&gt; 메소드를 사용하는 방법, &lt;code&gt;Session&lt;/code&gt; 파사드를 사용하는 방법, 그리고 &lt;code&gt;session&lt;/code&gt; 헬퍼 함수를 사용할 수 있습니다. 아무런 전달 인자 없이 &lt;code&gt;session&lt;/code&gt; 헬퍼함수를 호출할 때에는 전체 세션 객체가 반환됩니다. 예를 들어:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;session()-&amp;gt;regenerate();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;아이템-세션에-저장하기&quot;&gt;아이템 세션에 저장하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Session::put(&amp;#39;key&amp;#39;, &amp;#39;value&amp;#39;);

session([&amp;#39;key&amp;#39; =&amp;gt; &amp;#39;value&amp;#39;]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;배열-세션값으로-저장하기&quot;&gt;배열 세션값으로 저장하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Session::push(&amp;#39;user.teams&amp;#39;, &amp;#39;developers&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;세션에서-특정-아이템-가져오기&quot;&gt;세션에서 특정 아이템 가져오기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$value = Session::get(&amp;#39;key&amp;#39;);

$value = session(&amp;#39;key&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;특정-아이템을-찾거나-기본값-반환받기&quot;&gt;특정 아이템을 찾거나 기본값 반환받기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$value = Session::get(&amp;#39;key&amp;#39;, &amp;#39;default&amp;#39;);

$value = Session::get(&amp;#39;key&amp;#39;, function() { return &amp;#39;default&amp;#39;; });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;아이템-값-가져온-후-삭제하기&quot;&gt;아이템 값 가져온 후 삭제하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$value = Session::pull(&amp;#39;key&amp;#39;, &amp;#39;default&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;세션의-모든-데이터-가져오기&quot;&gt;세션의 모든 데이터 가져오기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$data = Session::all();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;세션에-아이템이-존재하는지-확인하기&quot;&gt;세션에 아이템이 존재하는지 확인하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if (Session::has(&amp;#39;users&amp;#39;))
{
    //
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;세션에서-특정-아이템-삭제하기&quot;&gt;세션에서 특정 아이템 삭제하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Session::forget(&amp;#39;key&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;세션의-모든-아이템-삭제하기&quot;&gt;세션의 모든 아이템 삭제하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Session::flush();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;세션-id-재생성하기&quot;&gt;세션 ID 재생성하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Session::regenerate();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;flash-data&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;임시-데이터&quot;&gt;임시 데이터&lt;/h2&gt;

&lt;p&gt;때로는 바로 다음번의 요청에서만 사용하기 위해서 세션에 아이템을 저장할 수 있습니다. 바로 &lt;code&gt;Session::flash&lt;/code&gt; 메소드를 사용하는 것입니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Session::flash(&amp;#39;key&amp;#39;, &amp;#39;value&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;현재의-임시-데이터를-다른-요청에서-사용하기-위해서-다시-임시-저장하기&quot;&gt;현재의 임시 데이터를 다른 요청에서 사용하기 위해서 다시 임시 저장하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Session::reflash();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;임시-데이터의-일부-값만-다시-임시-저장하기&quot;&gt;임시 데이터의 일부 값만 다시 임시 저장하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Session::keep([&amp;#39;username&amp;#39;, &amp;#39;email&amp;#39;]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;database-sessions&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;데이터-베이스-세션&quot;&gt;데이터 베이스 세션&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;database&lt;/code&gt; 세션 드라이버를 사용하는 경우 세션 아이템들이 저장될 테이블을 생성해야 합니다. 다음의 &lt;code&gt;Schema&lt;/code&gt; 예제를 통해서 테이블을 생성할 수 있습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Schema::create(&amp;#39;sessions&amp;#39;, function($table)
{
    $table-&amp;gt;string(&amp;#39;id&amp;#39;)-&amp;gt;unique();
    $table-&amp;gt;text(&amp;#39;payload&amp;#39;);
    $table-&amp;gt;integer(&amp;#39;last_activity&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;물론, &lt;code&gt;session:table&lt;/code&gt; 아티즌 명령어를 통해서 이 마이그레이션을 생성할 수 있습니다!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;php artisan session:table

composer dump-autoload

php artisan migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;session-drivers&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;세션-드라이버&quot;&gt;세션 드라이버&lt;/h2&gt;

&lt;p&gt;세션 “드라이버” 는 각각의 요청에 따라 세션이 어디에 저장될지를 결정합니다. 라라벨은 별다른 설정 없이 다양한 드라이버를 사용할 수 있습니다:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt; - 세션이 &lt;code&gt;storage/framework/sessions&lt;/code&gt; 폴더에 저장됩니다. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;cookie&lt;/code&gt; - 암호화된 쿠키를 사용하여 안전하게 세션을 저장할 것입니다. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;database&lt;/code&gt; - 세션은 어플리케이션에 의해서 데이터베이스에 저장됩니다. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;memcached&lt;/code&gt; / &lt;code&gt;redis&lt;/code&gt; - 세션은 캐시 기반의 드라이버들에 의해 빠르게 저장됩니다. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt; - 세션은 간단한 PHP 배열에 저장되지만 요청들간에 지속되지 않습니다. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;주의:&lt;/strong&gt; 배열 드라이버의 경우에는 실제로 세션은 유지되지 않기 때문에 &lt;a href=&quot;/docs/5.0/testing&quot;&gt;unit tests&lt;/a&gt;를 수행하는데에만 사용하시기 바랍니다. &lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 09 May 2015 00:00:00 +0900</pubDate>
        <link>http://www.xpressengine.com/docs/5.0/session</link>
        <guid isPermaLink="true">http://www.xpressengine.com/docs/5.0/session</guid>
        
        
        <category>5.0</category>
        
      </item>
    
      <item>
        <title>스키마 빌더(Schema Builder)</title>
        <description>&lt;h1 id=&quot;스키마-빌더(schema-builder)&quot;&gt;스키마 빌더(Schema Builder)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;소개&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#creating-and-dropping-tables&quot;&gt;테이블 생성 &amp;amp; 삭제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#adding-columns&quot;&gt;컬럼 추가&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#changing-columns&quot;&gt;컬럼 변경&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#renaming-columns&quot;&gt;컬럼 이름 변경&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dropping-columns&quot;&gt;컬럼 삭제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#checking-existence&quot;&gt;존재 유무 확인&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#adding-indexes&quot;&gt;인덱스 추가&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#foreign-keys&quot;&gt;외래키&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dropping-indexes&quot;&gt;인덱스 삭제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dropping-timestamps&quot;&gt;Timestamps 와 Soft Deletes 컬럼 삭제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#storage-engines&quot;&gt;스토리지 엔진&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;소개&quot;&gt;소개&lt;/h2&gt;

&lt;p&gt;라라벨의 &lt;code&gt;Schema&lt;/code&gt; 클래스는 데이터베이스에 의존하지 않는 테이블 조작 방법을 제공합니다. 이 기능은 라라벨이 지원하는 모든 데이터베이스에서 잘 동작하며 공통의 API를 가지고 있다는 것을 의미합니다. &lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;creating-and-dropping-tables&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;테이블-생성-&amp;amp;-삭제&quot;&gt;테이블 생성 &amp;amp; 삭제&lt;/h2&gt;

&lt;p&gt;새로운 데이터베이스 테이블을 생성하기 위해서는 &lt;code&gt;Schema::create&lt;/code&gt; 메소드를 사용합니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Schema::create(&amp;#39;users&amp;#39;, function($table)
{
    $table-&amp;gt;increments(&amp;#39;id&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;create&lt;/code&gt; 메소드의 첫번째 인자는 테이블 이름을 나타내고 두번째 인자는 새로운 테이블을 정의하는데 사용되는 &lt;code&gt;Blueprint&lt;/code&gt; 객체를 받는 &lt;code&gt;Closure&lt;/code&gt; 입니다. &lt;/p&gt;

&lt;p&gt;존재하는 데이터베이스 테이블 이름을 바꾸기 위해서는 &lt;code&gt;rename&lt;/code&gt; 메소드를 사용하면 됩니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Schema::rename($from, $to);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;스키마 작업이 진행될 위치를 지정하고자 한다면 &lt;code&gt;Schema::connection&lt;/code&gt; 메소드를 사용하면 됩니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Schema::connection(&amp;#39;foo&amp;#39;)-&amp;gt;create(&amp;#39;users&amp;#39;, function($table)
{
    $table-&amp;gt;increments(&amp;#39;id&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;테이블을 삭제하려면 &lt;code&gt;Scheme::drop&lt;/code&gt; 메소드를 사용하면 됩니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Schema::drop(&amp;#39;users&amp;#39;);

Schema::dropIfExists(&amp;#39;users&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;adding-columns&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;컬럼-추가하기&quot;&gt;컬럼 추가하기&lt;/h2&gt;

&lt;p&gt;존재하는 테이블을 수정하라면 &lt;code&gt;Schema::table&lt;/code&gt; 메소드를 사용하게 될것입니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Schema::table(&amp;#39;users&amp;#39;, function($table)
{
    $table-&amp;gt;string(&amp;#39;email&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;테이블 빌더에는 테이블을 만들 때 사용할 수 있는 다양한 컬럼의 종류들을 가지고 있습니다:&lt;/p&gt;

&lt;p&gt;명령어 |  설명
------------- | -------------
&lt;code&gt;$table-&amp;gt;bigIncrements(&amp;#39;id&amp;#39;);&lt;/code&gt;  |   증가 ID 를 “big integer” 로 하는것 
&lt;code&gt;$table-&amp;gt;bigInteger(&amp;#39;votes&amp;#39;);&lt;/code&gt;  |  테이블에 BIGINT 컬럼을 지정하는것
&lt;code&gt;$table-&amp;gt;binary(&amp;#39;data&amp;#39;);&lt;/code&gt;  |  테이블에 BLOB 컬럼 지정
&lt;code&gt;$table-&amp;gt;boolean(&amp;#39;confirmed&amp;#39;);&lt;/code&gt;  |  테이블에 BOOLEAN 컬럼 지정
&lt;code&gt;$table-&amp;gt;char(&amp;#39;name&amp;#39;, 4);&lt;/code&gt;  |  길이를 지정한 CHAR 타입을 지정
&lt;code&gt;$table-&amp;gt;date(&amp;#39;created_at&amp;#39;);&lt;/code&gt;  |  테이블에 DATE 타입 지정
&lt;code&gt;$table-&amp;gt;dateTime(&amp;#39;created_at&amp;#39;);&lt;/code&gt;  |  테이블에 DATETIME 타입 지정
&lt;code&gt;$table-&amp;gt;decimal(&amp;#39;amount&amp;#39;, 5, 2);&lt;/code&gt;  |  유효성과 크기 지정한 DECIMAL 타입 지정 
&lt;code&gt;$table-&amp;gt;double(&amp;#39;column&amp;#39;, 15, 8);&lt;/code&gt;  |  전체 15자리에 소수점 8자리까지 허용가능한 DOUBLE 타입 지정
&lt;code&gt;$table-&amp;gt;enum(&amp;#39;choices&amp;#39;, [&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;]);&lt;/code&gt; | 테이블에 ENUM 타입 지정
&lt;code&gt;$table-&amp;gt;float(&amp;#39;amount&amp;#39;);&lt;/code&gt;  |  테이블에 FLOAT 타입 지정
&lt;code&gt;$table-&amp;gt;increments(&amp;#39;id&amp;#39;);&lt;/code&gt;  |  테이블에 (primary key) ID 증가시키기
&lt;code&gt;$table-&amp;gt;integer(&amp;#39;votes&amp;#39;);&lt;/code&gt;  |  테이블에 INTEGER 타입 지정
&lt;code&gt;$table-&amp;gt;json(&amp;#39;options&amp;#39;);&lt;/code&gt;  |  테이블에 JSON 타입 지정
&lt;code&gt;$table-&amp;gt;jsonb(&amp;#39;options&amp;#39;);&lt;/code&gt;  |  테이블에 JSONB 타입 지정
&lt;code&gt;$table-&amp;gt;longText(&amp;#39;description&amp;#39;);&lt;/code&gt;  |  테이블에 LONGTEXT 타입 지정
&lt;code&gt;$table-&amp;gt;mediumInteger(&amp;#39;numbers&amp;#39;);&lt;/code&gt;  |  테이블에  MEDIUMINT 타입 지정
&lt;code&gt;$table-&amp;gt;mediumText(&amp;#39;description&amp;#39;);&lt;/code&gt;  |  테이블에 MEDIUMTEXT 타입 지정
&lt;code&gt;$table-&amp;gt;morphs(&amp;#39;taggable&amp;#39;);&lt;/code&gt;  |  INTERGER의 &lt;code&gt;taggable_id&lt;/code&gt; 와 문자열 &lt;code&gt;taggable_type&lt;/code&gt;타입 추가
&lt;code&gt;$table-&amp;gt;nullableTimestamps();&lt;/code&gt;  |  NULL값을 허용하는것 이외에 &lt;code&gt;timestamps()&lt;/code&gt; 와 동일합니다
&lt;code&gt;$table-&amp;gt;smallInteger(&amp;#39;votes&amp;#39;);&lt;/code&gt;  |  테이블에 SMALLINT 지정
&lt;code&gt;$table-&amp;gt;tinyInteger(&amp;#39;numbers&amp;#39;);&lt;/code&gt;  |  테이블에 TINYINT 지정
&lt;code&gt;$table-&amp;gt;softDeletes();&lt;/code&gt;  |  soft deletes을 위한 &lt;strong&gt;deleted_at&lt;/strong&gt; 컬럼 추가
&lt;code&gt;$table-&amp;gt;string(&amp;#39;email&amp;#39;);&lt;/code&gt;  |  VARCHAR 타입 지정
&lt;code&gt;$table-&amp;gt;string(&amp;#39;name&amp;#39;, 100);&lt;/code&gt;  |  길이를 지정한 VARCHAR 타입 지정
&lt;code&gt;$table-&amp;gt;text(&amp;#39;description&amp;#39;);&lt;/code&gt;  |  테이블에 TEXT 타입 지정
&lt;code&gt;$table-&amp;gt;time(&amp;#39;sunrise&amp;#39;);&lt;/code&gt;  |  테이블에 TIME 타입 지정
&lt;code&gt;$table-&amp;gt;timestamp(&amp;#39;added_on&amp;#39;);&lt;/code&gt;  |  테이블에 TIMESTAMP 타입 지정
&lt;code&gt;$table-&amp;gt;timestamps();&lt;/code&gt;  |  &lt;strong&gt;created_at&lt;/strong&gt; 과 &lt;strong&gt;updated_at&lt;/strong&gt; 컬럼 추가
&lt;code&gt;$table-&amp;gt;rememberToken();&lt;/code&gt;  |  VARCHAR(100) NULL의 &lt;code&gt;remember_token&lt;/code&gt; 추가
&lt;code&gt;-&amp;gt;nullable()&lt;/code&gt;  |   컬럼에 NULL 허용
&lt;code&gt;-&amp;gt;default($value)&lt;/code&gt;  |  컬럼의 기본값 설정
&lt;code&gt;-&amp;gt;unsigned()&lt;/code&gt;  |  INTEGER 를 UNSIGNED 로 지정&lt;/p&gt;

&lt;h4 id=&quot;mysql-에서-after-사용하기&quot;&gt;Mysql 에서 After 사용하기&lt;/h4&gt;

&lt;p&gt;만약 MySQL 데이터베이스를 사용하고 있다면 컬럼의 순서지정을 위해서 &lt;code&gt;after&lt;/code&gt; 메소드를 사용할 수 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$table-&amp;gt;string(&amp;#39;name&amp;#39;)-&amp;gt;after(&amp;#39;email&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;changing-columns&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;컬럼-변경&quot;&gt;컬럼 변경&lt;/h2&gt;

&lt;p&gt;** 주의:** 컬럼을 변경하기 전에 &lt;code&gt;composer.json&lt;/code&gt; 에 &lt;code&gt;doctrine/dbal&lt;/code&gt; 의존 패키지를 추가했는지 확인하십시오. &lt;/p&gt;

&lt;p&gt;때로는 이미 생성된 컬럼을 수정해야할 필요가 있습니다. 예를들어 문자열 컬럼의 사이즈를 늘리고자 할 경우가 그렇습니다. &lt;code&gt;change&lt;/code&gt; 메소드가 이 역활을 수행합니다! 예를들어 다음 예제는 &lt;code&gt;name&lt;/code&gt; 컬럼의 사이즈를 25에서 50으로 늘려줍니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Schema::table(&amp;#39;users&amp;#39;, function($table)
{
    $table-&amp;gt;string(&amp;#39;name&amp;#39;, 50)-&amp;gt;change();
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또한 다음처럼 컬럼에 Null 값이 가능하게 변경할 수도 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Schema::table(&amp;#39;users&amp;#39;, function($table)
{
    $table-&amp;gt;string(&amp;#39;name&amp;#39;, 50)-&amp;gt;nullable()-&amp;gt;change();
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;renaming-columns&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;컬럼-이름-변경&quot;&gt;컬럼 이름 변경&lt;/h2&gt;

&lt;p&gt;컬럼의 이름을 변경하기 위해서는 스키마 빌더에서 &lt;code&gt;renameColumn&lt;/code&gt; 메소드를 사용하면 됩니다. 컬럼이름을 변경하기 전에 &lt;code&gt;composer.json&lt;/code&gt; 에 &lt;code&gt;doctrine/dbal&lt;/code&gt; 의존성을 추가했는지 확인하십시오. &lt;/p&gt;

&lt;p&gt;(역자주 컬럼 이름 변경을 사용하기 위해서는 composer.json 의 require 에 doctrine/dbal 을 추가해서 composer 를 업데이트 해준 상태여야 합니다.)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Schema::table(&amp;#39;users&amp;#39;, function($table)
{
    $table-&amp;gt;renameColumn(&amp;#39;from&amp;#39;, &amp;#39;to&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;주의 :&lt;/strong&gt; 현재 &lt;code&gt;enum&lt;/code&gt; 컬럼 타입의 이름을 변경하는 것은 지원되지 않습니다. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;dropping-columns&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;컬럼-삭제&quot;&gt;컬럼 삭제&lt;/h2&gt;

&lt;p&gt;컬럼을 삭제하고자 한다면 스키마 빌더에서 &lt;code&gt;dropColumn&lt;/code&gt; 메소드를 사용하면 됩니다. 앞서 컬럼 이름 변경과 마찬가지로 컬럼 삭제 작업을 수행하기 전에 &lt;code&gt;composer.json&lt;/code&gt; 에 &lt;code&gt;doctrine/dbal&lt;/code&gt; 의존성을 추가해주어야 합니다. &lt;/p&gt;

&lt;h4 id=&quot;데이터베이스-테이블에서-컬럼-삭제하기&quot;&gt;데이터베이스 테이블에서 컬럼 삭제하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Schema::table(&amp;#39;users&amp;#39;, function($table)
{
    $table-&amp;gt;dropColumn(&amp;#39;votes&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;데이터베이스-테이블에서-다수의-컬럼-삭제하기&quot;&gt;데이터베이스 테이블에서 다수의 컬럼 삭제하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Schema::table(&amp;#39;users&amp;#39;, function($table)
{
    $table-&amp;gt;dropColumn([&amp;#39;votes&amp;#39;, &amp;#39;avatar&amp;#39;, &amp;#39;location&amp;#39;]);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;checking-existence&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;존재-유무-확인&quot;&gt;존재 유무 확인&lt;/h2&gt;

&lt;h4 id=&quot;테이블이-존재하는지-확인하기&quot;&gt;테이블이 존재하는지 확인하기&lt;/h4&gt;

&lt;p&gt;테이블이나 컬럼이 존재하는지 확인하는 것은 &lt;code&gt;hasTable&lt;/code&gt; 과 &lt;code&gt;hasColumn&lt;/code&gt; 메소드르 사용하여 쉽게 확인할 수 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if (Schema::hasTable(&amp;#39;users&amp;#39;))
{
    //
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;컬럼이-존재하는지-확인하기&quot;&gt;컬럼이 존재하는지 확인하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if (Schema::hasColumn(&amp;#39;users&amp;#39;, &amp;#39;email&amp;#39;))
{
    //
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;adding-indexes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;인덱스-추가하기&quot;&gt;인덱스 추가하기&lt;/h2&gt;

&lt;p&gt;스키마 빌더는 여러가지 타입의 인덱스들을 지원합니다. 인덱스를 추가하는 데에는 두가지 방법이 있습니다. 첫번째는 컬럼을 정의하면서 동시에 인덱스를 추가하는 것이고, 두번째는 이를 분리해서 작업하는 것입니다:
    $table-&amp;gt;string(&amp;#39;email&amp;#39;)-&amp;gt;unique();&lt;/p&gt;

&lt;p&gt;인덱스를 추가하는 것을 라인을 나눠서 할 수도 있습니다. 아래의 예는 사용할 수 있는 인덱스 타입들의 목록입니다:&lt;/p&gt;

&lt;p&gt;명령어 | 설명
------------- | -------------
&lt;code&gt;$table-&amp;gt;primary(&amp;#39;id&amp;#39;);&lt;/code&gt;  |  Primary 키 추가
&lt;code&gt;$table-&amp;gt;primary([&amp;#39;first&amp;#39;, &amp;#39;last&amp;#39;]);&lt;/code&gt;  |  복합키 추가
&lt;code&gt;$table-&amp;gt;unique(&amp;#39;email&amp;#39;);&lt;/code&gt;  |  유니크 인덱스 추가
&lt;code&gt;$table-&amp;gt;index(&amp;#39;state&amp;#39;);&lt;/code&gt;  |  기본 인덱스 추가&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;foreign-keys&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;외래키&quot;&gt;외래키&lt;/h2&gt;

&lt;p&gt;라라벨은 테이블에 외래키 제약을 거는것도 지원합니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$table-&amp;gt;integer(&amp;#39;user_id&amp;#39;)-&amp;gt;unsigned();
$table-&amp;gt;foreign(&amp;#39;user_id&amp;#39;)-&amp;gt;references(&amp;#39;id&amp;#39;)-&amp;gt;on(&amp;#39;users&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 예에서 &lt;code&gt;user_id&lt;/code&gt; 컬럼이&lt;code&gt;users&lt;/code&gt;테이블에 &lt;code&gt;id&lt;/code&gt;컬럼을 참조한다는 것을 선언 하고 있습니다. 외래키 컬럼을 먼저 생성하는것을 잊지 마십시오!&lt;/p&gt;

&lt;p&gt;또한 외래키 옵션인 &amp;quot;on delete”와 &amp;quot;on update&amp;quot; 에 대한 처리를 지정할 수 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$table-&amp;gt;foreign(&amp;#39;user_id&amp;#39;)
      -&amp;gt;references(&amp;#39;id&amp;#39;)-&amp;gt;on(&amp;#39;users&amp;#39;)
      -&amp;gt;onDelete(&amp;#39;cascade&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;외래키를 삭제하려면 &lt;code&gt;dropForeign&lt;/code&gt; 메소드를 사용하면 됩니다. 다른 인덱스에서 사용되는 것과 유사한 인덱스 이름 명명 규칙이 외래 키에도 사용되고 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$table-&amp;gt;dropForeign(&amp;#39;posts_user_id_foreign&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;주의:&lt;/strong&gt; 정수형 증분되는 값(incrementing integer)을 참조하여 외래키를 만들때 외래키 컬럼을 항상 &lt;code&gt;unsigned&lt;/code&gt;로 만드는 것을 유의해야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;dropping-indexes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;인덱스-삭제하기&quot;&gt;인덱스 삭제하기&lt;/h2&gt;

&lt;p&gt;인덱스를 삭제하려면 인덱스 이름을 지정해야 합니다. 라라벨은 기본적으로 인덱스에 자체적인 의미가 있는 이름을 할당한다. 간단하게 테이블 이름, 인덱스가 있는 컬럼의 이름, 인데스 타입을 연결한 것입니다. 몇가지 예제입니다:&lt;/p&gt;

&lt;p&gt;명령어 | 설명
------------- | -------------
&lt;code&gt;$table-&amp;gt;dropPrimary(&amp;#39;users_id_primary&amp;#39;);&lt;/code&gt;  |  “users” 테이블에서 Primary 키 삭제
&lt;code&gt;$table-&amp;gt;dropUnique(&amp;#39;users_email_unique&amp;#39;);&lt;/code&gt;  |  “users” 테이블에서 유니크 인덱스 삭제
&lt;code&gt;$table-&amp;gt;dropIndex(&amp;#39;geo_state_index&amp;#39;);&lt;/code&gt;  |  “geo” 테이블에서 기본 인덱스 삭제&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;dropping-timestamps&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;timestamps와-softdeletes-컬럼-삭제&quot;&gt;Timestamps와 softDeletes 컬럼 삭제&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;timestamps&lt;/code&gt;, &lt;code&gt;nullableTimestamps&lt;/code&gt;, &lt;code&gt;softDeletes&lt;/code&gt;타입의 컬럼을 삭제하려면 다음과 같은 메소드들을 사용합니다:&lt;/p&gt;

&lt;p&gt;명령어| 설명
------------- | -------------
&lt;code&gt;$table-&amp;gt;dropTimestamps();&lt;/code&gt;  |  테이블에서 &lt;strong&gt;created_at&lt;/strong&gt; 와 &lt;strong&gt;updated_at&lt;/strong&gt; 컬럼을 삭제
&lt;code&gt;$table-&amp;gt;dropSoftDeletes();&lt;/code&gt;  |  테이블에서 &lt;strong&gt;deleted_at&lt;/strong&gt; 컬럼을 삭제&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;storage-engines&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;스토리지-엔진&quot;&gt;스토리지 엔진&lt;/h2&gt;

&lt;p&gt;테이블에 스토리지 엔진을 지정하려면 스키마 빌더에서 &lt;code&gt;engine&lt;/code&gt; 속성을 지정하면 됩니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Schema::create(&amp;#39;users&amp;#39;, function($table)
{
    $table-&amp;gt;engine = &amp;#39;InnoDB&amp;#39;;

    $table-&amp;gt;string(&amp;#39;email&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Sat, 09 May 2015 00:00:00 +0900</pubDate>
        <link>http://www.xpressengine.com/docs/5.0/schema</link>
        <guid isPermaLink="true">http://www.xpressengine.com/docs/5.0/schema</guid>
        
        
        <category>5.0</category>
        
      </item>
    
      <item>
        <title>HTTP 라우팅(HTTP Routing)</title>
        <description>&lt;h1 id=&quot;http-라우팅(http-routing-)&quot;&gt;HTTP 라우팅(HTTP Routing )&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#basic-routing&quot;&gt;기본적인 라우팅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#csrf-protection&quot;&gt;CSRF 보호하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#method-spoofing&quot;&gt;메소드 속이기-Spoofing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#route-parameters&quot;&gt;라우트 파라미터&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#named-routes&quot;&gt;이름이 지정된 라우트&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#route-groups&quot;&gt;라우트 그룹&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#route-model-binding&quot;&gt;라우트 모델 바인딩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#throwing-404-errors&quot;&gt;404 에러 처리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;basic-routing&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;기본적인-라우팅&quot;&gt;기본적인 라우팅&lt;/h2&gt;

&lt;p&gt;어플리케이션에서 사용하는 대부분의 라우트는 &lt;code&gt;app/Http/routes.php&lt;/code&gt; 파일안에 정의합니다. 이 파일은 &lt;code&gt;App\Providers\RouteServiceProvider&lt;/code&gt; 클래스에 의해서 로딩됩니다. 가장 기본적인 라라벨의 라우트는 URI와 &lt;code&gt;Closure&lt;/code&gt; 하나로 지정됩니다:&lt;/p&gt;

&lt;h4 id=&quot;기본적인-get-라우트&quot;&gt;기본적인 GET 라우트&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::get(&amp;#39;/&amp;#39;, function()
{
    return &amp;#39;Hello World&amp;#39;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;기타-기본-라우트&quot;&gt;기타 기본 라우트&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::post(&amp;#39;foo/bar&amp;#39;, function()
{
    return &amp;#39;Hello World&amp;#39;;
});

Route::put(&amp;#39;foo/bar&amp;#39;, function()
{
    //
});

Route::delete(&amp;#39;foo/bar&amp;#39;, function()
{
    //
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;여러-http-메소드에-라우트-등록하기&quot;&gt;여러 HTTP 메소드에 라우트 등록하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::match([&amp;#39;get&amp;#39;, &amp;#39;post&amp;#39;], &amp;#39;/&amp;#39;, function()
{
    return &amp;#39;Hello World&amp;#39;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;어떠한-http-메소드에도-응답하는-라우트-등록하기&quot;&gt;어떠한 HTTP 메소드에도 응답하는 라우트 등록하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::any(&amp;#39;foo&amp;#39;, function()
{
    return &amp;#39;Hello World&amp;#39;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;라우트를 위한 URL을 생성할 필요가 많은데 이때는 &lt;code&gt;url&lt;/code&gt; 헬퍼 함수를 사용하면 됩니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$url = url(&amp;#39;foo&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;csrf-protection&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;csrf-보호하기&quot;&gt;CSRF 보호하기&lt;/h2&gt;

&lt;p&gt;라라벨에서는 크로스 사이트 요청 위조 &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_request_forgery&quot;&gt;cross-site request forgeries&lt;/a&gt;으로부터 응용 프로그램을 쉽게 보호할 수 있습니다. 크로스 사이트 요청 위조는 악의적인 공격의 하나이며 인증받은 사용자를 대신하여 허가 받지 않은 명령을 수행합니다. &lt;/p&gt;

&lt;p&gt;라라벨은 어플리케이션에 의해서 관리되고 있는 각각의 사용자별 CSRF &amp;quot;토큰&amp;quot;을 자동으로 생성합니다. 이 토큰은 인증된 사용자가 실제로 어플리케이션에 요청을 보내고 있는지 식별하는데 사용됩니다. &lt;/p&gt;

&lt;h4 id=&quot;form-에-csrf-토큰-삽입하기&quot;&gt;Form 에 CSRF 토큰 삽입하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;_token&amp;quot; value=&amp;quot;&amp;lt;?php echo csrf_token(); ?&amp;gt;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음처럼 Blade &lt;a href=&quot;/docs/5.0/templates&quot;&gt;템플릿 엔진&lt;/a&gt;을 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;_token&amp;quot; value=&amp;quot;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일일이 수동으로 POST, PUT 또는 DELETE 요청에 대한 CSRF 토큰을 확인할 필요가 없습니다. &lt;code&gt;VerifyCsrfToken&lt;/code&gt; &lt;a href=&quot;/docs/5.0/middleware&quot;&gt;HTTP 미들웨어&lt;/a&gt;가 요청중인 토큰을 세션에 저장되어 있는 토큰과 일치하는지 확인할 것입니다. &lt;/p&gt;

&lt;h4 id=&quot;x-csrf-token&quot;&gt;X-CSRF-TOKEN&lt;/h4&gt;

&lt;p&gt;덧붙여 미들웨어는 &amp;quot;POST&amp;quot; 파라미터로 CSRF 토큰을 찾기 위해서 &lt;code&gt;X-CSRF-TOKEN&lt;/code&gt; 요청 헤더(request header)도 확인합니다. 사용자는 예를 들어, &amp;quot;메타&amp;quot; 태그에 토큰을 저장하고 모든 요청 헤더(request header)에 추가하도록 jQuery를 설정 할 수 있습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;meta name=&amp;quot;csrf-token&amp;quot; content=&amp;quot;&amp;quot; /&amp;gt;

$.ajaxSetup({
        headers: {
            &amp;#39;X-CSRF-TOKEN&amp;#39;: $(&amp;#39;meta[name=&amp;quot;csrf-token&amp;quot;]&amp;#39;).attr(&amp;#39;content&amp;#39;)
        }
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 모든 AJAX 요청은 자동으로 CSRF 토큰을 포함하게 됩니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$.ajax({
   url: &amp;quot;/foo/bar&amp;quot;,
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;x-xsrf-token&quot;&gt;X-XSRF-TOKEN&lt;/h4&gt;

&lt;p&gt;또한 라라벨은 CSRF 토큰을 &lt;code&gt;XSRF-TOKEN&lt;/code&gt; 쿠키에 저장합니다. 이 쿠키값을 요청 헤더(request header)에 &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt;을 설정하는데 사용할 수 있습니다. Angular와 같은 몇몇 자바스크립트 프레임워크는 자동으로 이 값을 사용합니다. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;참고: &lt;code&gt;X-CSRF-TOKEN&lt;/code&gt;와 &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt;의 차이점은 전자는 일반적인 텍스트를 사용한다면 후자는 암호화된 값을 사용한다는 것인데, 이는 라라벨에서는 쿠키를 항상 암호화 된 값으로 사용하기 때문입니다. 여러분이 토큰 값을 제공하기 위해&lt;code&gt;csrf_token ()&lt;/code&gt;함수를 사용하는 경우는, 아마 &lt;code&gt;X-CSRF-TOKEN&lt;/code&gt; 헤더를 사용하게 되는 경우일것입니다. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;method-spoofing&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;메소드-spoofing-속이기&quot;&gt;메소드 Spoofing-속이기&lt;/h2&gt;

&lt;p&gt;HTML form은 실제로 &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt; 와 &lt;code&gt;DELETE&lt;/code&gt; 액션을 지원하지 않습니다. 따라서 &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt; 이나 &lt;code&gt;DELETE&lt;/code&gt; 로 지정된 라우트를 호출하는 HTML form을 정의한다면 &lt;code&gt;_method&lt;/code&gt; 의 숨겨진 필드를 지정해야합니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;_method&lt;/code&gt; 필드로 보내진 값은 HTTP 요청 메소드를 구분하는데 사용됩니다. 다음 예를 참조하십시오:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;form action=&amp;quot;/foo/bar&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;_method&amp;quot; value=&amp;quot;PUT&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;_token&amp;quot; value=&amp;quot;&amp;lt;?php echo csrf_token(); ?&amp;gt;&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;route-parameters&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;라우트-파라미터&quot;&gt;라우트 파라미터&lt;/h2&gt;

&lt;p&gt;당연하게도 라우트에서 요청된 URI 세그먼트를 얻을 수 있습니다:&lt;/p&gt;

&lt;h4 id=&quot;기본적인-라우트-파라미터&quot;&gt;기본적인 라우트 파라미터&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::get(&amp;#39;user/{id}&amp;#39;, function($id)
{
    return &amp;#39;User &amp;#39;.$id;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;주의:&lt;/strong&gt; 라우트 파라미터는 &lt;code&gt;-&lt;/code&gt; 문자를 포함하면 안됩니다. (&lt;code&gt;_&lt;/code&gt;)를 사용하십시오. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;선택적인-라우트-파라미터&quot;&gt;선택적인 라우트 파라미터&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::get(&amp;#39;user/{name?}&amp;#39;, function($name = null)
{
    return $name;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;기본값을-가진-선택적인-라우트-파라미터&quot;&gt;기본값을 가진 선택적인 라우트 파라미터&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::get(&amp;#39;user/{name?}&amp;#39;, function($name = &amp;#39;John&amp;#39;)
{
    return $name;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;정규표현식로-파라미터-제약하기&quot;&gt;정규표현식로 파라미터 제약하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::get(&amp;#39;user/{name}&amp;#39;, function($name)
{
    //
})
-&amp;gt;where(&amp;#39;name&amp;#39;, &amp;#39;[A-Za-z]+&amp;#39;);

Route::get(&amp;#39;user/{id}&amp;#39;, function($id)
{
    //
})
-&amp;gt;where(&amp;#39;id&amp;#39;, &amp;#39;[0-9]+&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;파리미터-제약을-배열로-전달하기&quot;&gt;파리미터 제약을 배열로 전달하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::get(&amp;#39;user/{id}/{name}&amp;#39;, function($id, $name)
{
    //
})
-&amp;gt;where([&amp;#39;id&amp;#39; =&amp;gt; &amp;#39;[0-9]+&amp;#39;, &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;[a-z]+&amp;#39;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;글로벌-패턴-지정하기&quot;&gt;글로벌 패턴 지정하기&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;pattern&lt;/code&gt; 메소드를 사용하면 라우트 파리미터 변수를 지정한 정규 표현식에서 항상 제약을 할 수 있습니다. 이들은 &lt;code&gt;RouteServiceProvider&lt;/code&gt; 의 &lt;code&gt;before&lt;/code&gt; 메소드로 정의하는 것을 권장합니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$router-&amp;gt;pattern(&amp;#39;id&amp;#39;, &amp;#39;[0-9]+&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;한번 패턴이 지정되고 나면 모든 라우트에서 사용하는 파라미터에 대해서 적용됩니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::get(&amp;#39;user/{id}&amp;#39;, function($id)
{
    // Only called if {id} is numeric.
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;라우트-파라미터-값에-엑세스하기&quot;&gt;라우트 파라미터 값에 엑세스하기&lt;/h4&gt;

&lt;p&gt;라우트 밖에서 라우트 파라미터 값에 엑세스할 필요가 있는 경우 &lt;code&gt;input&lt;/code&gt; 메소드를 사용합니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if ($route-&amp;gt;input(&amp;#39;id&amp;#39;) == 1)
{
    //
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또한 &lt;code&gt;Illuminate\Http\Request&lt;/code&gt; 인스턴스를 통해서 현재의 라우트 파라미터에 엑세스 할 수 있습니다. 현재 요청에 대한 인스턴스는 &lt;code&gt;Illuminate\Http\Request&lt;/code&gt; 타입힌트를 하거나, &lt;code&gt;Request&lt;/code&gt; 파사드를 사용하면 의존성 주입을 통해서 엑세스 할 수 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;use Illuminate\Http\Request;

Route::get(&amp;#39;user/{id}&amp;#39;, function(Request $request, $id)
{
    if ($request-&amp;gt;route(&amp;#39;id&amp;#39;))
    {
        //
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;named-routes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;이름이-지정된-라우트&quot;&gt;이름이 지정된 라우트&lt;/h2&gt;

&lt;p&gt;이름이 지정된 라우트는 지정된 라우트에 대한 URL을 생성하거나 Redirect를 할 때 편리함을 제공합니다. &lt;code&gt;as&lt;/code&gt; 배열 키를 통해 라우트에 이름을 지정할 수 있습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::get(&amp;#39;user/profile&amp;#39;, [&amp;#39;as&amp;#39; =&amp;gt; &amp;#39;profile&amp;#39;, function()
{
    //
}]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;컨트롤러 액션에 대해서도 라우트 이름을 지정할 수 있습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::get(&amp;#39;user/profile&amp;#39;, [
    &amp;#39;as&amp;#39; =&amp;gt; &amp;#39;profile&amp;#39;, &amp;#39;uses&amp;#39; =&amp;gt; &amp;#39;UserController@showProfile&amp;#39;
]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 URL을 생성하거나 Redirect를 하는데 라우트 이름을 사용할 수 있습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$url = route(&amp;#39;profile&amp;#39;);

$redirect = redirect()-&amp;gt;route(&amp;#39;profile&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;currentRouteName&lt;/code&gt; 메소드는 현재의 요청에 대한 라우트 이름을 반환합니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$name = Route::currentRouteName();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;route-groups&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;route-groups&quot;&gt;Route Groups&lt;/h2&gt;

&lt;h2 id=&quot;라우트-그룹&quot;&gt;라우트 그룹&lt;/h2&gt;

&lt;p&gt;때때로 많은 라우트들이 URL 세그먼트, 미들웨어, 네임스페이스 등과 같은 공통의 요구사항을 공유하고자 하는 경우가 있습니다. 이러한 옵션들을 모든 라우트에 개별로 각각 지정하는 대신에 라우트 그룹을 통해서 다수의 라우트에 속성을 지정할 수가 있습니다. &lt;/p&gt;

&lt;p&gt;속성값들을 공유하는 것은 &lt;code&gt;Route::group&lt;/code&gt; 메소드의 첫번째 인자로 배열을 지정하면 됩니다. &lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;route-group-middleware&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;미들웨어&quot;&gt;미들웨어&lt;/h3&gt;

&lt;p&gt;라우트 그룹에 지정하는 배열의 &lt;code&gt;middleware&lt;/code&gt; 값에 미들웨어의 목록을 정의함으로써 그룹내의 모든 라우트에 미들웨어가 적용됩니다. 미들웨어는 배열에 정의된 순서대로 실행될것입니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::group([&amp;#39;middleware&amp;#39; =&amp;gt; &amp;#39;foo|bar&amp;#39;], function()
{
    Route::get(&amp;#39;/&amp;#39;, function()
    {
        // Has Foo And Bar Middleware
    });

    Route::get(&amp;#39;user/profile&amp;#39;, function()
    {
        // Has Foo And Bar Middleware
    });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;route-group-namespace&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;네임스페이스&quot;&gt;네임스페이스&lt;/h3&gt;

&lt;p&gt;그룹의 속성 배열에 &lt;code&gt;namespace&lt;/code&gt; 파라미터를 사용하여 가룹의 모든 컨트롤러에 네임스페이스를 지정할 수 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::group([&amp;#39;namespace&amp;#39; =&amp;gt; &amp;#39;Admin&amp;#39;], function()
{
    // Controllers Within The &amp;quot;App\Http\Controllers\Admin&amp;quot; Namespace

    Route::group([&amp;#39;namespace&amp;#39; =&amp;gt; &amp;#39;User&amp;#39;], function()
    {
        // Controllers Within The &amp;quot;App\Http\Controllers\Admin\User&amp;quot; Namespace
    });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;참고:&lt;/strong&gt; 기본적으로 &lt;code&gt;RouteServiceProvider&lt;/code&gt; 에서 포함하고 있는 &lt;code&gt;routes.php&lt;/code&gt; 파일에는 라우트 컨트롤들을 위해서 네임스페이스가 지정되어 있습니다. 따라서 &lt;code&gt;App\Http\Controllers&lt;/code&gt;의 전체 네임스페이스를 따로 지정할 필요는 없습니다. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;sub-domain-routing&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;서브-도메인-라우팅&quot;&gt;서브 도메인 라우팅&lt;/h4&gt;

&lt;p&gt;라라벨 라우트에서는 와일드 파라미터 형태의 도메인 값을 설정하여 서브 도메인을 처리할 수 있습니다:&lt;/p&gt;

&lt;h4 id=&quot;서브-도메인-라우트-등록하기&quot;&gt;서브 도메인 라우트 등록하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::group([&amp;#39;domain&amp;#39; =&amp;gt; &amp;#39;{account}.myapp.com&amp;#39;], function()
{

    Route::get(&amp;#39;user/{id}&amp;#39;, function($account, $id)
    {
        //
    });

});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;route-prefixing&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;라우트-접두어-지정하기&quot;&gt;라우트 접두어 지정하기&lt;/h3&gt;

&lt;p&gt;라우트 그룹의 접두어는 그룹의 속성 배열에 &lt;code&gt;prefix&lt;/code&gt; 옵션을 사용하여 지정합니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::group([&amp;#39;prefix&amp;#39; =&amp;gt; &amp;#39;admin&amp;#39;], function()
{
    Route::get(&amp;#39;users&amp;#39;, function()
    {
        // Matches The &amp;quot;/admin/users&amp;quot; URL
    });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또한 &lt;code&gt;prefix&lt;/code&gt; 파라미터를 라우트들의 공통 파라미터로 지정할 수 있습니다:&lt;/p&gt;

&lt;h4 id=&quot;라우트-prefix-안에서-url-파라미터-등록하기&quot;&gt;라우트 prefix 안에서 URL 파라미터 등록하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::group([&amp;#39;prefix&amp;#39; =&amp;gt; &amp;#39;accounts/{account_id}&amp;#39;], function()
{
    Route::get(&amp;#39;detail&amp;#39;, function($account_id)
    {
        //
    });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또한 지정된 파라미터 변수의 제약 사항을 정의할 수도 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::group([
    &amp;#39;prefix&amp;#39; =&amp;gt; &amp;#39;accounts/{account_id}&amp;#39;,
    &amp;#39;where&amp;#39; =&amp;gt; [&amp;#39;account_id&amp;#39; =&amp;gt; &amp;#39;[0-9]+&amp;#39;],
], function() {

    // Define Routes Here
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;route-model-binding&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;라우트-모델-바인딩&quot;&gt;라우트 모델 바인딩&lt;/h2&gt;

&lt;p&gt;라라벨의 모델 바인딩은 라우트에 클래스 인스턴스를 주입할 수 있는 편리한 방법을 제공합니다. 예를 들어 사용자의 ID를 넘기는 대신에 주어진 ID에 해당하는 User 클래스 인스턴스를 주입할 수 있습니다. &lt;/p&gt;

&lt;p&gt;먼저 주어진 파라미터에 대한 클래스를 지정하기 위해서 라우트의 &lt;code&gt;model&lt;/code&gt; 메소드를 사용하여야 합니다. 이 모델 바인딩은 &lt;code&gt;RouteServiceProvider::boot&lt;/code&gt; 안에서 정의되어야 합니다. &lt;/p&gt;

&lt;h4 id=&quot;모델과-파라미터-바인딩하기&quot;&gt;모델과 파라미터 바인딩하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public function boot(Router $router)
{
    parent::boot($router);

    $router-&amp;gt;model(&amp;#39;user&amp;#39;, &amp;#39;App\User&amp;#39;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음으로, &lt;code&gt;{user}&lt;/code&gt; 파라미터를 포함한 라우트를 정의합니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::get(&amp;#39;profile/{user}&amp;#39;, function(App\User $user)
{
    //
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;{user}&lt;/code&gt; 파라미터와 &lt;code&gt;App\User&lt;/code&gt; 모델이 바인딩되어 있기 때문에 라우트에는 &lt;code&gt;User&lt;/code&gt; 인스턴스가 주입 될것입니다. 예를 들어 &lt;code&gt;profile/&lt;/code&gt;으로 요청이 들어오면 ID가 1인 &lt;code&gt;User&lt;/code&gt;의 인스턴스가 주입됩니다. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;주의:&lt;/strong&gt; 만약 데이터베이스에서 일치하는 모델 인스턴스를 찾이 못하는 경우 404 에러가 발생합니다. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;만약 &amp;quot;찾지 못함&amp;quot;의 동작을 지정하고 싶다면 세번째 인자로 클로저를 전달하면 됩니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::model(&amp;#39;user&amp;#39;, &amp;#39;User&amp;#39;, function()
{
    throw new NotFoundHttpException;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;만약 고유한 의존성 검색 로직을 사용하려면 &lt;code&gt;Route::bind&lt;/code&gt; 메소드를 사용해야 합니다. &lt;code&gt;bind&lt;/code&gt; 메소드에 전달되는 클로저에는 URI 세그먼트에 해당하는 값이 전달되고 라우트에 주입할 클래스의 인스턴스를 반환해야 합니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::bind(&amp;#39;user&amp;#39;, function($value)
{
    return User::where(&amp;#39;name&amp;#39;, $value)-&amp;gt;first();
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;throwing-404-errors&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;404-에러-발생시키기&quot;&gt;404 에러 발생시키기&lt;/h2&gt;

&lt;p&gt;라우트에서 404 에러를 발생시키는 방법은 2가지가 있습니다. 첫번째로 &lt;code&gt;abort&lt;/code&gt; 헬퍼 함수를 사용하는 것입니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;abort(404);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;abort&lt;/code&gt; 헬퍼함수는 지정된 상태 코드와 함께 &lt;code&gt;Symfony\Component\HttpFoundation\Exception\HttpException&lt;/code&gt; 를 던집니다.&lt;/p&gt;

&lt;p&gt;두번째로 직접으로 &lt;code&gt;Symfony\Component\HttpKernel\Exception\NotFoundHttpException&lt;/code&gt;을 던지는 것입니다. &lt;/p&gt;

&lt;p&gt;404 예외 처리와 오류의 커스텀한 처리를 사용하는 보다 자세한 내용은 다음 문서의 &lt;a href=&quot;/docs/5.0/errors#http-exceptions&quot;&gt;errors&lt;/a&gt; 부분을 참조하십시오.&lt;/p&gt;
</description>
        <pubDate>Sat, 09 May 2015 00:00:00 +0900</pubDate>
        <link>http://www.xpressengine.com/docs/5.0/routing</link>
        <guid isPermaLink="true">http://www.xpressengine.com/docs/5.0/routing</guid>
        
        
        <category>5.0</category>
        
      </item>
    
      <item>
        <title>HTTP Responses</title>
        <description>&lt;h1 id=&quot;http-responses&quot;&gt;HTTP Responses&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#basic-responses&quot;&gt;기본적인 Responses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#redirects&quot;&gt;리다이렉트&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#other-responses&quot;&gt;기타 Responses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#response-macros&quot;&gt;Response 매크로&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;basic-responses&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;기본적인-responses&quot;&gt;기본적인 Responses&lt;/h2&gt;

&lt;h4 id=&quot;라우트로-부터-문자열-반환&quot;&gt;라우트로 부터 문자열 반환&lt;/h4&gt;

&lt;p&gt;가장 기본적인 Response 는 라우트로 부터 반환되는 문자열입니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Route::get(&amp;#39;/&amp;#39;, function()
{
    return &amp;#39;Hello World&amp;#39;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;사용자-지정-response-생성하기&quot;&gt;사용자 지정 Response 생성하기&lt;/h4&gt;

&lt;p&gt;대부분의 라우트나 컨트롤러 액션에서는 &lt;code&gt;Illuminate\Http\Response&lt;/code&gt;의 인스턴스나 &lt;a href=&quot;/docs/5.0/views&quot;&gt;뷰&lt;/a&gt;를 반환합니다. &lt;code&gt;Response&lt;/code&gt; 인스턴스를 반환하는 것은 여러분이 response 의 HTTP 상태 코드나 헤더를 변경할 수 있도록 지원합니다. &lt;code&gt;Response&lt;/code&gt;는 &lt;code&gt;Symfony\Component\HttpFoundation\Response&lt;/code&gt; 클래스를 상속받고 있으며 HTTP response 를 만들기 위한 다양한 메소드를 제공합니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;use Illuminate\Http\Response;

return (new Response($content, $status))
              -&amp;gt;header(&amp;#39;Content-Type&amp;#39;, $value);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;좀 더 쉬운 방법으로 &lt;code&gt;response&lt;/code&gt; 헬퍼 함수를 사용할 수 있습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return response($content, $status)
              -&amp;gt;header(&amp;#39;Content-Type&amp;#39;, $value);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;참고:&lt;/strong&gt; &lt;code&gt;Response&lt;/code&gt; 객체의 사용가능한 전체 메소드 목록은 &lt;a href=&quot;http://laravel.com/api/master/Illuminate/Http/Response.html&quot;&gt;API 문서&lt;/a&gt;와 &lt;a href=&quot;http://api.symfony.com/2.5/Symfony/Component/HttpFoundation/Response.html&quot;&gt;Symfony API 문서&lt;/a&gt; 를 참고하십시오. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;response-에서-뷰파일-내보내기&quot;&gt;Response 에서 뷰파일 내보내기&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Response&lt;/code&gt; 클래스 메서드에 액세스 할 필요가 있지만, Response 의 컨텐츠 내용으로 뷰를 반환하고 싶다면, &lt;code&gt;view&lt;/code&gt; 메소드를 사용하면 됩니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return response()-&amp;gt;view(&amp;#39;hello&amp;#39;)-&amp;gt;header(&amp;#39;Content-Type&amp;#39;, $type);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;response에-cookie-추가하기&quot;&gt;Response에 Cookie 추가하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return response($content)-&amp;gt;withCookie(cookie(&amp;#39;name&amp;#39;, &amp;#39;value&amp;#39;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;메소드-체이닝&quot;&gt;메소드 체이닝&lt;/h4&gt;

&lt;p&gt;대부분의 &lt;code&gt;Response&lt;/code&gt; 메소드는 유연하게 response 를 만들 수 있도록 체이닝이 가능합니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return response()-&amp;gt;view(&amp;#39;hello&amp;#39;)-&amp;gt;header(&amp;#39;Content-Type&amp;#39;, $type)
                 -&amp;gt;withCookie(cookie(&amp;#39;name&amp;#39;, &amp;#39;value&amp;#39;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;redirects&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;리다이렉트&quot;&gt;리다이렉트&lt;/h2&gt;

&lt;p&gt;일반적으로 리다이렉트 Response 는 &lt;code&gt;Illuminate\Http\RedirectResponse&lt;/code&gt; 클래스의 인스턴스이며, 사용자를 다른 URL로 리다이렉트하는데 필요한 적절한 헤더를 포함하고 있습니다. &lt;/p&gt;

&lt;h4 id=&quot;리다이렉트-반환하기&quot;&gt;리다이렉트 반환하기&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;RedirectResponse&lt;/code&gt; 인스턴스를 생성하는데는 몇가지 방법이 있습니다. 가장 간단한 방법은 &lt;code&gt;redirect&lt;/code&gt; 헬퍼 함수를 사용하는 것입니다. 테스트를 진행할 때 리다이렉트 Response를 생성하는 모킹(Mock)은 일반적으로 잘 하지 않기 때문에, 대부분의 경우에 헬퍼 함수를 사용하게 됩니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return redirect(&amp;#39;user/login&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;리다이렉트에-플래시-데이터와-함께-반환하기&quot;&gt;리다이렉트에 플래시 데이터와 함께 반환하기&lt;/h4&gt;

&lt;p&gt;새로운 URL로 리다이렉트 이동하고 &lt;a href=&quot;/docs/5.0/session&quot;&gt;플래시 데이터를 세션에 저장&lt;/a&gt; 하는 것은 일반적으로 동시에 진행됩니다. 따라서 편의성을 높이기 위해 &lt;code&gt;RedirectResponse&lt;/code&gt; 인스턴스를 생성하고 &lt;strong&gt;동시에&lt;/strong&gt; 메소드 체인을 통해 플래시 데이터를 세션에 저장할 수 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return redirect(&amp;#39;user/login&amp;#39;)-&amp;gt;with(&amp;#39;message&amp;#39;, &amp;#39;Login Failed&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;이전-url로-리다이렉트&quot;&gt;이전 URL로 리다이렉트&lt;/h4&gt;

&lt;p&gt;예를 들어 폼 전송 후에, 사용자를 이전 URL로 리다이렉트 시키고자 하는 경우가 있을 수 있습니다. 이런 경우에는 &lt;code&gt;back&lt;/code&gt; 메소드를 사용하면 됩니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return redirect()-&amp;gt;back();

return redirect()-&amp;gt;back()-&amp;gt;withInput();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;이름이-지정된-라우트로-리다이렉트-하기&quot;&gt;이름이 지정된 라우트로 리다이렉트 하기&lt;/h4&gt;

&lt;p&gt;전달 인자 없이 &lt;code&gt;redirect&lt;/code&gt; 헬퍼 함수를 호출할 때에는 &lt;code&gt;Illuminate\Routing\Redirector&lt;/code&gt;의 인스턴스가 반환됩니다. 따라서 &lt;code&gt;Redirector&lt;/code&gt; 인스턴스의 메소드를 사용할 수 있습니다. 예를 들어 이름지 지정된 라우트로 이동하는 &lt;code&gt;RedirectResponse&lt;/code&gt;를 생성하고자 한다면 &lt;code&gt;route&lt;/code&gt; 메소드를 사용할 수 있습니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return redirect()-&amp;gt;route(&amp;#39;login&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;이름이-지정된-라우트로-파라미터와-함께-리다이렉트-하기&quot;&gt;이름이 지정된 라우트로 파라미터와 함께 리다이렉트 하기&lt;/h4&gt;

&lt;p&gt;라우트에 전달해야할 파라미터가 있다면 &lt;code&gt;route&lt;/code&gt; 메소드의 두번째 인자로 전달하면 됩니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// For a route with the following URI: profile/{id}

return redirect()-&amp;gt;route(&amp;#39;profile&amp;#39;, [1]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;라우트에 “ID” 파라미터를 따라 Eloquent 모델을 획득하는 라우트로 리디렉션하는 경우, 모델 그 자신을 그대로 전달할 수도 있습니다. ID는 자동으로 추출되어 질것입니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return redirect()-&amp;gt;route(&amp;#39;profile&amp;#39;, [$user]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;이름지-지정된-라우트로-파라미터-이름과-함께-리다이렉트-하기&quot;&gt;이름지 지정된 라우트로 파라미터 이름과 함께 리다이렉트 하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// For a route with the following URI: profile/{user}

return redirect()-&amp;gt;route(&amp;#39;profile&amp;#39;, [&amp;#39;user&amp;#39; =&amp;gt; 1]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;컨트롤러-액션으로-리다이렉트-하기&quot;&gt;컨트롤러 액션으로 리다이렉트 하기&lt;/h4&gt;

&lt;p&gt;이름이 지정된 라우트로 이동하는 &lt;code&gt;RedirectResponse&lt;/code&gt; 인스턴스를 생성하는것과 비슷하게 &lt;a href=&quot;/docs/5.0/controllers&quot;&gt;컨트롤러 액션&lt;/a&gt; 으로 리다이렉션 할 수 있습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return redirect()-&amp;gt;action(&amp;#39;App\Http\Controllers\HomeController@index&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;주의:&lt;/strong&gt; &lt;code&gt;URL:setRootControllerNamespace&lt;/code&gt; 를 통해서 컨트롤러의 루트 네임스페이스가 지정되었다면, 전체 네임 스페이스를 지정할 필요가 없습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;컨트롤러-액션으로-파라미터와-함께-리다이렉트-하기&quot;&gt;컨트롤러 액션으로 파라미터와 함께 리다이렉트 하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return redirect()-&amp;gt;action(&amp;#39;App\Http\Controllers\UserController@profile&amp;#39;, [1]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;컨트롤러-액션으로-파라미터-이름과-함께-리다이렉트-하기&quot;&gt;컨트롤러 액션으로 파라미터 이름과 함께 리다이렉트 하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return redirect()-&amp;gt;action(&amp;#39;App\Http\Controllers\UserController@profile&amp;#39;, [&amp;#39;user&amp;#39; =&amp;gt; 1]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;other-responses&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;기타-response&quot;&gt;기타 Response&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;response&lt;/code&gt; 헬퍼 함수를 사용하여 편리하게 다른 타입의 response 인스턴스를 생성할 수도 있습니다. &lt;code&gt;response&lt;/code&gt; 헬퍼함수를 인자없이 호출하게 되면 &lt;code&gt;Illuminate\Contracts\Routing\ResponseFactory&lt;/code&gt; &lt;a href=&quot;/docs/5.0/contracts&quot;&gt;contract&lt;/a&gt; 를 반환합니다. 이 contract 는 response 를 생성하기 위한 다양한 메소드를 제공합니다. &lt;/p&gt;

&lt;h4 id=&quot;json-response-생성하기&quot;&gt;JSON response 생성하기&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;json&lt;/code&gt; 메소드는 헤더의 &lt;code&gt;Content-Type&lt;/code&gt; 을 자동으로 &lt;code&gt;application/json&lt;/code&gt; 으로 지정합니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return response()-&amp;gt;json([&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Abigail&amp;#39;, &amp;#39;state&amp;#39; =&amp;gt; &amp;#39;CA&amp;#39;]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;jsonp-response-생성하기&quot;&gt;JSONP Response 생성하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return response()-&amp;gt;json([&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Abigail&amp;#39;, &amp;#39;state&amp;#39; =&amp;gt; &amp;#39;CA&amp;#39;])
                 -&amp;gt;setCallback($request-&amp;gt;input(&amp;#39;callback&amp;#39;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;파일-다운로드-response-생성하기&quot;&gt;파일 다운로드 Response 생성하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return response()-&amp;gt;download($pathToFile);

return response()-&amp;gt;download($pathToFile, $name, $headers);

return response()-&amp;gt;download($pathToFile)-&amp;gt;deleteFileAfterSend(true);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;참고:&lt;/strong&gt; 파일 다운로드를 관리하는 Symfony의 HttpFoundation에서 다운로드 할 파일의 이름이 ASCII 파일 이름임을 필요로 하고 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;response-macros&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;response-매크로&quot;&gt;Response 매크로&lt;/h2&gt;

&lt;p&gt;다양한 라우트와 컨트롤러에서 재사용할 수 있는 사용자 정의 Response를 정의하려면 &lt;code&gt;Illuminate\Contracts\Routing\ResponseFactory&lt;/code&gt; 구현 클래스의 &lt;code&gt;macro&lt;/code&gt; 메소드를 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음은 &lt;a href=&quot;/docs/5.0/providers&quot;&gt;service provider&amp;#39;s&lt;/a&gt;의 &lt;code&gt;boot&lt;/code&gt; 메소드에서 정의하는 예제입니다:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;?php namespace App\Providers;

use Response;
use Illuminate\Support\ServiceProvider;

class ResponseMacroServiceProvider extends ServiceProvider {

    /**
     * Perform post-registration booting of services.
     *
     * @return void
     */
    public function boot()
    {
        Response::macro(&amp;#39;caps&amp;#39;, function($value)
        {
            return Response::make(strtoupper($value));
        });
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; 메소드는 매크로로 지정할 이름을 첫 번째 인자로, 클로저를 두 번째 인자로 전달 받습니다. 매크로로 등록된 클로저는 &lt;code&gt;response&lt;/code&gt; 헬퍼 함수를 통해서 &lt;code&gt;ResponseFactory&lt;/code&gt; 구현 객체에서 호출될것 입니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;return response()-&amp;gt;caps(&amp;#39;foo&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Sat, 09 May 2015 00:00:00 +0900</pubDate>
        <link>http://www.xpressengine.com/docs/5.0/responses</link>
        <guid isPermaLink="true">http://www.xpressengine.com/docs/5.0/responses</guid>
        
        
        <category>5.0</category>
        
      </item>
    
  </channel>
</rss>
